kenneth@ml:~/SwahiliMorphemeTagging$ python3 swahiliFullTrain.py outputTrain output Test -n 16
/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/cross_validation.py:41: DeprecationWarning: This module was deprecated in version 0.18 in favor of the model_selection module into which all the refactored classes and functions are moved. Also note that the interface of the new CV iterators are different from that of this module. This module will be removed in 0.20.
  "This module will be removed in 0.20.", DeprecationWarning)
/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/grid_search.py:42: DeprecationWarning: This module was deprecated in version 0.18 in favor of the model_selection module into which all the refactored classes and functions are moved. This module will be removed in 0.20.
  DeprecationWarning)
Fitting on 200000 words
There are 31925 verbs
There are 57542 nouns
/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/cross_validation.py:553: Warning: The least populated class in y has only 1 members, which is too few. The minimum number of labels for any class cannot be less than n_folds=5.
  % (min_labels, self.n_folds)), Warning)
Fitting 5 folds for each of 24 candidates, totalling 120 fits
[CV] classify__C=0.1, reduce_dim__k=None .............................
[CV] classify__C=0.1, reduce_dim__k=None .............................
[CV] classify__C=0.1, reduce_dim__k=None .............................
[CV] classify__C=0.1, reduce_dim__k=None .............................
[CV] classify__C=0.1, reduce_dim__k=None .............................
multiprocessing.pool.RemoteTraceback: 
"""
Traceback (most recent call last):
  File "/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/externals/joblib/_parallel_backends.py", line 350, in __call__
    return self.func(*args, **kwargs)
  File "/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/externals/joblib/parallel.py", line 131, in __call__
    return [func(*args, **kwargs) for func, args, kwargs in self.items]
  File "/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/externals/joblib/parallel.py", line 131, in <listcomp>
    return [func(*args, **kwargs) for func, args, kwargs in self.items]
  File "/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/cross_validation.py", line 1675, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/pipeline.py", line 248, in fit
    Xt, fit_params = self._fit(X, y, **fit_params)
  File "/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/pipeline.py", line 213, in _fit
    **fit_params_steps[name])
  File "/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/externals/joblib/memory.py", line 362, in __call__
    return self.func(*args, **kwargs)
  File "/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/pipeline.py", line 581, in _fit_transform_one
    res = transformer.fit_transform(X, y, **fit_params)
  File "/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/base.py", line 520, in fit_transform
    return self.fit(X, y, **fit_params).transform(X)
  File "/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/feature_selection/univariate_selection.py", line 348, in fit
    self._check_params(X, y)
  File "/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/feature_selection/univariate_selection.py", line 490, in _check_params
    if not (self.k == "all" or 0 <= self.k <= X.shape[1]):
TypeError: '<=' not supported between instances of 'int' and 'NoneType'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/intel/intelpython3/lib/python3.6/multiprocessing/pool.py", line 119, in worker
    result = (True, func(*args, **kwds))
  File "/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/externals/joblib/_parallel_backends.py", line 359, in __call__
    raise TransportableException(text, e_type)
sklearn.externals.joblib.my_exceptions.TransportableException: TransportableException
___________________________________________________________________________
TypeError                                          Tue May  8 02:27:25 2018
PID: 521                  Python 3.6.3: /opt/intel/intelpython3/bin/python3
...........................................................................
/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    126     def __init__(self, iterator_slice):
    127         self.items = list(iterator_slice)
    128         self._size = len(self.items)
    129 
    130     def __call__(self):
--> 131         return [func(*args, **kwargs) for func, args, kwargs in self.items]
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('reduce_dim',...random_state=None, tol=0.0001,
     verbose=0))]), <200000x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>, ['PRON', 'POSS-PRON', 'GEN-CON', 'COMMA', 'GEN-CON', 'N', 'LEFT-PARENTHESIS', 'CC', 'CONJ', 'COMMA', 'GEN-CON', 'N', 'N', 'PROPNAME', 'N', 'N', 'N', 'PREP', 'COMMA', 'PRON', ...], <function _passthrough_scorer>, memmap([ 18181,  27468,  33209, ..., 199997, 199998, 199999]), array([     0,      1,      2, ...,  70782,  71719, 122460]), 4, {'classify__C': 0.1, 'reduce_dim__k': None}, {}), {'error_score': 'raise', 'return_parameters': True})]
    132 
    133     def __len__(self):
    134         return self._size
    135 

...........................................................................
/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/externals/joblib/parallel.py in <listcomp>(.0=<list_iterator object>)
    126     def __init__(self, iterator_slice):
    127         self.items = list(iterator_slice)
    128         self._size = len(self.items)
    129 
    130     def __call__(self):
--> 131         return [func(*args, **kwargs) for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('reduce_dim',...random_state=None, tol=0.0001,
     verbose=0))]), <200000x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>, ['PRON', 'POSS-PRON', 'GEN-CON', 'COMMA', 'GEN-CON', 'N', 'LEFT-PARENTHESIS', 'CC', 'CONJ', 'COMMA', 'GEN-CON', 'N', 'N', 'PROPNAME', 'N', 'N', 'N', 'PREP', 'COMMA', 'PRON', ...], <function _passthrough_scorer>, memmap([ 18181,  27468,  33209, ..., 199997, 199998, 199999]), array([     0,      1,      2, ...,  70782,  71719, 122460]), 4, {'classify__C': 0.1, 'reduce_dim__k': None}, {})
        kwargs = {'error_score': 'raise', 'return_parameters': True}
    132 
    133     def __len__(self):
    134         return self._size
    135 

...........................................................................
/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/cross_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('reduce_dim',...random_state=None, tol=0.0001,
     verbose=0))]), X=<200000x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>, y=['PRON', 'POSS-PRON', 'GEN-CON', 'COMMA', 'GEN-CON', 'N', 'LEFT-PARENTHESIS', 'CC', 'CONJ', 'COMMA', 'GEN-CON', 'N', 'N', 'PROPNAME', 'N', 'N', 'N', 'PREP', 'COMMA', 'PRON', ...], scorer=<function _passthrough_scorer>, train=memmap([ 18181,  27468,  33209, ..., 199997, 199998, 199999]), test=array([     0,      1,      2, ...,  70782,  71719, 122460]), verbose=4, parameters={'classify__C': 0.1, 'reduce_dim__k': None}, fit_params={}, return_train_score=False, return_parameters=True, error_score='raise')
   1670 
   1671     try:
   1672         if y_train is None:
   1673             estimator.fit(X_train, **fit_params)
   1674         else:
-> 1675             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...andom_state=None, tol=0.0001,
     verbose=0))])>
        X_train = <159981x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>
        y_train = ['NUM-ROM', 'ABBR', 'REL-SI', 'ABBR', 'RIGHT-PARENTHESIS', 'DOUBLE-QUOTE-CLOSING', 'AMPERSAND', 'DOUBLE-QUOTE-CLOSING', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'CC', ...]
        fit_params = {}
   1676 
   1677     except Exception as e:
   1678         if error_score == 'raise':
   1679             raise

...........................................................................
/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('reduce_dim',...random_state=None, tol=0.0001,
     verbose=0))]), X=<159981x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>, y=['NUM-ROM', 'ABBR', 'REL-SI', 'ABBR', 'RIGHT-PARENTHESIS', 'DOUBLE-QUOTE-CLOSING', 'AMPERSAND', 'DOUBLE-QUOTE-CLOSING', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'CC', ...], **fit_params={})
    243         Returns
    244         -------
    245         self : Pipeline
    246             This estimator
    247         """
--> 248         Xt, fit_params = self._fit(X, y, **fit_params)
        Xt = undefined
        fit_params = {}
        self._fit = <bound method Pipeline._fit of Pipeline(memory=N...andom_state=None, tol=0.0001,
     verbose=0))])>
        X = <159981x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>
        y = ['NUM-ROM', 'ABBR', 'REL-SI', 'ABBR', 'RIGHT-PARENTHESIS', 'DOUBLE-QUOTE-CLOSING', 'AMPERSAND', 'DOUBLE-QUOTE-CLOSING', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'CC', ...]
    249         if self._final_estimator is not None:
    250             self._final_estimator.fit(Xt, y, **fit_params)
    251         return self
    252 

...........................................................................
/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/pipeline.py in _fit(self=Pipeline(memory=None,
     steps=[('reduce_dim',...random_state=None, tol=0.0001,
     verbose=0))]), X=<159981x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>, y=['NUM-ROM', 'ABBR', 'REL-SI', 'ABBR', 'RIGHT-PARENTHESIS', 'DOUBLE-QUOTE-CLOSING', 'AMPERSAND', 'DOUBLE-QUOTE-CLOSING', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'CC', ...], **fit_params={})
    208                 else:
    209                     cloned_transformer = clone(transformer)
    210                 # Fit or load from cache the current transfomer
    211                 Xt, fitted_transformer = fit_transform_one_cached(
    212                     cloned_transformer, None, Xt, y,
--> 213                     **fit_params_steps[name])
        fit_params_steps = {'classify': {}, 'reduce_dim': {}}
        name = 'reduce_dim'
    214                 # Replace the transformer of the step with the fitted
    215                 # transformer. This is necessary when loading the transformer
    216                 # from the cache.
    217                 self.steps[step_idx] = (name, fitted_transformer)

...........................................................................
/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/externals/joblib/memory.py in __call__(self=NotMemorizedFunc(func=<function _fit_transform_one at 0x7f95553a31e0>), *args=(SelectKBest(k=None, score_func=<function chi2 at 0x7f956de80c80>), None, <159981x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>, ['NUM-ROM', 'ABBR', 'REL-SI', 'ABBR', 'RIGHT-PARENTHESIS', 'DOUBLE-QUOTE-CLOSING', 'AMPERSAND', 'DOUBLE-QUOTE-CLOSING', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'CC', ...]), **kwargs={})
    357     # Should be a light as possible (for speed)
    358     def __init__(self, func):
    359         self.func = func
    360 
    361     def __call__(self, *args, **kwargs):
--> 362         return self.func(*args, **kwargs)
        self.func = <function _fit_transform_one>
        args = (SelectKBest(k=None, score_func=<function chi2 at 0x7f956de80c80>), None, <159981x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>, ['NUM-ROM', 'ABBR', 'REL-SI', 'ABBR', 'RIGHT-PARENTHESIS', 'DOUBLE-QUOTE-CLOSING', 'AMPERSAND', 'DOUBLE-QUOTE-CLOSING', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'CC', ...])
        kwargs = {}
    363 
    364     def call_and_shelve(self, *args, **kwargs):
    365         return NotMemorizedResult(self.func(*args, **kwargs))
    366 

...........................................................................
/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/pipeline.py in _fit_transform_one(transformer=SelectKBest(k=None, score_func=<function chi2 at 0x7f956de80c80>), weight=None, X=<159981x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>, y=['NUM-ROM', 'ABBR', 'REL-SI', 'ABBR', 'RIGHT-PARENTHESIS', 'DOUBLE-QUOTE-CLOSING', 'AMPERSAND', 'DOUBLE-QUOTE-CLOSING', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'CC', ...], **fit_params={})
    576 
    577 
    578 def _fit_transform_one(transformer, weight, X, y,
    579                        **fit_params):
    580     if hasattr(transformer, 'fit_transform'):
--> 581         res = transformer.fit_transform(X, y, **fit_params)
        res = undefined
        transformer.fit_transform = <bound method TransformerMixin.fit_transform of ...e, score_func=<function chi2 at 0x7f956de80c80>)>
        X = <159981x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>
        y = ['NUM-ROM', 'ABBR', 'REL-SI', 'ABBR', 'RIGHT-PARENTHESIS', 'DOUBLE-QUOTE-CLOSING', 'AMPERSAND', 'DOUBLE-QUOTE-CLOSING', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'CC', ...]
        fit_params = {}
    582     else:
    583         res = transformer.fit(X, y, **fit_params).transform(X)
    584     # if we have a weight for this transformer, multiply output
    585     if weight is None:

...........................................................................
/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/base.py in fit_transform(self=SelectKBest(k=None, score_func=<function chi2 at 0x7f956de80c80>), X=<159981x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>, y=['NUM-ROM', 'ABBR', 'REL-SI', 'ABBR', 'RIGHT-PARENTHESIS', 'DOUBLE-QUOTE-CLOSING', 'AMPERSAND', 'DOUBLE-QUOTE-CLOSING', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'CC', ...], **fit_params={})
    515         if y is None:
    516             # fit method of arity 1 (unsupervised transformation)
    517             return self.fit(X, **fit_params).transform(X)
    518         else:
    519             # fit method of arity 2 (supervised transformation)
--> 520             return self.fit(X, y, **fit_params).transform(X)
        self.fit = <bound method _BaseFilter.fit of SelectKBest(k=None, score_func=<function chi2 at 0x7f956de80c80>)>
        X = <159981x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>
        y = ['NUM-ROM', 'ABBR', 'REL-SI', 'ABBR', 'RIGHT-PARENTHESIS', 'DOUBLE-QUOTE-CLOSING', 'AMPERSAND', 'DOUBLE-QUOTE-CLOSING', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'CC', ...]
        fit_params.transform = undefined
    521 
    522 
    523 class DensityMixin(object):
    524     """Mixin class for all density estimators in scikit-learn."""

...........................................................................
/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/feature_selection/univariate_selection.py in fit(self=SelectKBest(k=None, score_func=<function chi2 at 0x7f956de80c80>), X=<159981x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>, y=array(['NUM-ROM', 'ABBR', 'REL-SI', ..., 'DOUBLE-QUOTE-OPENING', 'COMMA',
       'N'], dtype='<U20'))
    343         if not callable(self.score_func):
    344             raise TypeError("The score function should be a callable, %s (%s) "
    345                             "was passed."
    346                             % (self.score_func, type(self.score_func)))
    347 
--> 348         self._check_params(X, y)
        self._check_params = <bound method SelectKBest._check_params of Selec...e, score_func=<function chi2 at 0x7f956de80c80>)>
        X = <159981x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>
        y = array(['NUM-ROM', 'ABBR', 'REL-SI', ..., 'DOUBLE-QUOTE-OPENING', 'COMMA',
       'N'], dtype='<U20')
    349         score_func_ret = self.score_func(X, y)
    350         if isinstance(score_func_ret, (list, tuple)):
    351             self.scores_, self.pvalues_ = score_func_ret
    352             self.pvalues_ = np.asarray(self.pvalues_)

...........................................................................
/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/feature_selection/univariate_selection.py in _check_params(self=SelectKBest(k=None, score_func=<function chi2 at 0x7f956de80c80>), X=<159981x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>, y=array(['NUM-ROM', 'ABBR', 'REL-SI', ..., 'DOUBLE-QUOTE-OPENING', 'COMMA',
       'N'], dtype='<U20'))
    485     def __init__(self, score_func=f_classif, k=10):
    486         super(SelectKBest, self).__init__(score_func)
    487         self.k = k
    488 
    489     def _check_params(self, X, y):
--> 490         if not (self.k == "all" or 0 <= self.k <= X.shape[1]):
        self.k = None
        X.shape = (159981, 50228)
    491             raise ValueError("k should be >=0, <= n_features; got %r."
    492                              "Use k='all' to return all features."
    493                              % self.k)
    494 

TypeError: '<=' not supported between instances of 'int' and 'NoneType'
___________________________________________________________________________
"""

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/externals/joblib/parallel.py", line 699, in retrieve
    self._output.extend(job.get(timeout=self.timeout))
  File "/opt/intel/intelpython3/lib/python3.6/multiprocessing/pool.py", line 644, in get
    raise self._value
sklearn.externals.joblib.my_exceptions.TransportableException: TransportableException
___________________________________________________________________________
TypeError                                          Tue May  8 02:27:25 2018
PID: 521                  Python 3.6.3: /opt/intel/intelpython3/bin/python3
...........................................................................
/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    126     def __init__(self, iterator_slice):
    127         self.items = list(iterator_slice)
    128         self._size = len(self.items)
    129 
    130     def __call__(self):
--> 131         return [func(*args, **kwargs) for func, args, kwargs in self.items]
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('reduce_dim',...random_state=None, tol=0.0001,
     verbose=0))]), <200000x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>, ['PRON', 'POSS-PRON', 'GEN-CON', 'COMMA', 'GEN-CON', 'N', 'LEFT-PARENTHESIS', 'CC', 'CONJ', 'COMMA', 'GEN-CON', 'N', 'N', 'PROPNAME', 'N', 'N', 'N', 'PREP', 'COMMA', 'PRON', ...], <function _passthrough_scorer>, memmap([ 18181,  27468,  33209, ..., 199997, 199998, 199999]), array([     0,      1,      2, ...,  70782,  71719, 122460]), 4, {'classify__C': 0.1, 'reduce_dim__k': None}, {}), {'error_score': 'raise', 'return_parameters': True})]
    132 
    133     def __len__(self):
    134         return self._size
    135 

...........................................................................
/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/externals/joblib/parallel.py in <listcomp>(.0=<list_iterator object>)
    126     def __init__(self, iterator_slice):
    127         self.items = list(iterator_slice)
    128         self._size = len(self.items)
    129 
    130     def __call__(self):
--> 131         return [func(*args, **kwargs) for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('reduce_dim',...random_state=None, tol=0.0001,
     verbose=0))]), <200000x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>, ['PRON', 'POSS-PRON', 'GEN-CON', 'COMMA', 'GEN-CON', 'N', 'LEFT-PARENTHESIS', 'CC', 'CONJ', 'COMMA', 'GEN-CON', 'N', 'N', 'PROPNAME', 'N', 'N', 'N', 'PREP', 'COMMA', 'PRON', ...], <function _passthrough_scorer>, memmap([ 18181,  27468,  33209, ..., 199997, 199998, 199999]), array([     0,      1,      2, ...,  70782,  71719, 122460]), 4, {'classify__C': 0.1, 'reduce_dim__k': None}, {})
        kwargs = {'error_score': 'raise', 'return_parameters': True}
    132 
    133     def __len__(self):
    134         return self._size
    135 

...........................................................................
/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/cross_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('reduce_dim',...random_state=None, tol=0.0001,
     verbose=0))]), X=<200000x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>, y=['PRON', 'POSS-PRON', 'GEN-CON', 'COMMA', 'GEN-CON', 'N', 'LEFT-PARENTHESIS', 'CC', 'CONJ', 'COMMA', 'GEN-CON', 'N', 'N', 'PROPNAME', 'N', 'N', 'N', 'PREP', 'COMMA', 'PRON', ...], scorer=<function _passthrough_scorer>, train=memmap([ 18181,  27468,  33209, ..., 199997, 199998, 199999]), test=array([     0,      1,      2, ...,  70782,  71719, 122460]), verbose=4, parameters={'classify__C': 0.1, 'reduce_dim__k': None}, fit_params={}, return_train_score=False, return_parameters=True, error_score='raise')
   1670 
   1671     try:
   1672         if y_train is None:
   1673             estimator.fit(X_train, **fit_params)
   1674         else:
-> 1675             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...andom_state=None, tol=0.0001,
     verbose=0))])>
        X_train = <159981x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>
        y_train = ['NUM-ROM', 'ABBR', 'REL-SI', 'ABBR', 'RIGHT-PARENTHESIS', 'DOUBLE-QUOTE-CLOSING', 'AMPERSAND', 'DOUBLE-QUOTE-CLOSING', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'CC', ...]
        fit_params = {}
   1676 
   1677     except Exception as e:
   1678         if error_score == 'raise':
   1679             raise

...........................................................................
/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('reduce_dim',...random_state=None, tol=0.0001,
     verbose=0))]), X=<159981x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>, y=['NUM-ROM', 'ABBR', 'REL-SI', 'ABBR', 'RIGHT-PARENTHESIS', 'DOUBLE-QUOTE-CLOSING', 'AMPERSAND', 'DOUBLE-QUOTE-CLOSING', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'CC', ...], **fit_params={})
    243         Returns
    244         -------
    245         self : Pipeline
    246             This estimator
    247         """
--> 248         Xt, fit_params = self._fit(X, y, **fit_params)
        Xt = undefined
        fit_params = {}
        self._fit = <bound method Pipeline._fit of Pipeline(memory=N...andom_state=None, tol=0.0001,
     verbose=0))])>
        X = <159981x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>
        y = ['NUM-ROM', 'ABBR', 'REL-SI', 'ABBR', 'RIGHT-PARENTHESIS', 'DOUBLE-QUOTE-CLOSING', 'AMPERSAND', 'DOUBLE-QUOTE-CLOSING', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'CC', ...]
    249         if self._final_estimator is not None:
    250             self._final_estimator.fit(Xt, y, **fit_params)
    251         return self
    252 

...........................................................................
/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/pipeline.py in _fit(self=Pipeline(memory=None,
     steps=[('reduce_dim',...random_state=None, tol=0.0001,
     verbose=0))]), X=<159981x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>, y=['NUM-ROM', 'ABBR', 'REL-SI', 'ABBR', 'RIGHT-PARENTHESIS', 'DOUBLE-QUOTE-CLOSING', 'AMPERSAND', 'DOUBLE-QUOTE-CLOSING', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'CC', ...], **fit_params={})
    208                 else:
    209                     cloned_transformer = clone(transformer)
    210                 # Fit or load from cache the current transfomer
    211                 Xt, fitted_transformer = fit_transform_one_cached(
    212                     cloned_transformer, None, Xt, y,
--> 213                     **fit_params_steps[name])
        fit_params_steps = {'classify': {}, 'reduce_dim': {}}
        name = 'reduce_dim'
    214                 # Replace the transformer of the step with the fitted
    215                 # transformer. This is necessary when loading the transformer
    216                 # from the cache.
    217                 self.steps[step_idx] = (name, fitted_transformer)

...........................................................................
/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/externals/joblib/memory.py in __call__(self=NotMemorizedFunc(func=<function _fit_transform_one at 0x7f95553a31e0>), *args=(SelectKBest(k=None, score_func=<function chi2 at 0x7f956de80c80>), None, <159981x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>, ['NUM-ROM', 'ABBR', 'REL-SI', 'ABBR', 'RIGHT-PARENTHESIS', 'DOUBLE-QUOTE-CLOSING', 'AMPERSAND', 'DOUBLE-QUOTE-CLOSING', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'CC', ...]), **kwargs={})
    357     # Should be a light as possible (for speed)
    358     def __init__(self, func):
    359         self.func = func
    360 
    361     def __call__(self, *args, **kwargs):
--> 362         return self.func(*args, **kwargs)
        self.func = <function _fit_transform_one>
        args = (SelectKBest(k=None, score_func=<function chi2 at 0x7f956de80c80>), None, <159981x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>, ['NUM-ROM', 'ABBR', 'REL-SI', 'ABBR', 'RIGHT-PARENTHESIS', 'DOUBLE-QUOTE-CLOSING', 'AMPERSAND', 'DOUBLE-QUOTE-CLOSING', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'CC', ...])
        kwargs = {}
    363 
    364     def call_and_shelve(self, *args, **kwargs):
    365         return NotMemorizedResult(self.func(*args, **kwargs))
    366 

...........................................................................
/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/pipeline.py in _fit_transform_one(transformer=SelectKBest(k=None, score_func=<function chi2 at 0x7f956de80c80>), weight=None, X=<159981x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>, y=['NUM-ROM', 'ABBR', 'REL-SI', 'ABBR', 'RIGHT-PARENTHESIS', 'DOUBLE-QUOTE-CLOSING', 'AMPERSAND', 'DOUBLE-QUOTE-CLOSING', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'CC', ...], **fit_params={})
    576 
    577 
    578 def _fit_transform_one(transformer, weight, X, y,
    579                        **fit_params):
    580     if hasattr(transformer, 'fit_transform'):
--> 581         res = transformer.fit_transform(X, y, **fit_params)
        res = undefined
        transformer.fit_transform = <bound method TransformerMixin.fit_transform of ...e, score_func=<function chi2 at 0x7f956de80c80>)>
        X = <159981x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>
        y = ['NUM-ROM', 'ABBR', 'REL-SI', 'ABBR', 'RIGHT-PARENTHESIS', 'DOUBLE-QUOTE-CLOSING', 'AMPERSAND', 'DOUBLE-QUOTE-CLOSING', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'CC', ...]
        fit_params = {}
    582     else:
    583         res = transformer.fit(X, y, **fit_params).transform(X)
    584     # if we have a weight for this transformer, multiply output
    585     if weight is None:

...........................................................................
/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/base.py in fit_transform(self=SelectKBest(k=None, score_func=<function chi2 at 0x7f956de80c80>), X=<159981x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>, y=['NUM-ROM', 'ABBR', 'REL-SI', 'ABBR', 'RIGHT-PARENTHESIS', 'DOUBLE-QUOTE-CLOSING', 'AMPERSAND', 'DOUBLE-QUOTE-CLOSING', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'CC', ...], **fit_params={})
    515         if y is None:
    516             # fit method of arity 1 (unsupervised transformation)
    517             return self.fit(X, **fit_params).transform(X)
    518         else:
    519             # fit method of arity 2 (supervised transformation)
--> 520             return self.fit(X, y, **fit_params).transform(X)
        self.fit = <bound method _BaseFilter.fit of SelectKBest(k=None, score_func=<function chi2 at 0x7f956de80c80>)>
        X = <159981x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>
        y = ['NUM-ROM', 'ABBR', 'REL-SI', 'ABBR', 'RIGHT-PARENTHESIS', 'DOUBLE-QUOTE-CLOSING', 'AMPERSAND', 'DOUBLE-QUOTE-CLOSING', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'CC', ...]
        fit_params.transform = undefined
    521 
    522 
    523 class DensityMixin(object):
    524     """Mixin class for all density estimators in scikit-learn."""

...........................................................................
/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/feature_selection/univariate_selection.py in fit(self=SelectKBest(k=None, score_func=<function chi2 at 0x7f956de80c80>), X=<159981x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>, y=array(['NUM-ROM', 'ABBR', 'REL-SI', ..., 'DOUBLE-QUOTE-OPENING', 'COMMA',
       'N'], dtype='<U20'))
    343         if not callable(self.score_func):
    344             raise TypeError("The score function should be a callable, %s (%s) "
    345                             "was passed."
    346                             % (self.score_func, type(self.score_func)))
    347 
--> 348         self._check_params(X, y)
        self._check_params = <bound method SelectKBest._check_params of Selec...e, score_func=<function chi2 at 0x7f956de80c80>)>
        X = <159981x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>
        y = array(['NUM-ROM', 'ABBR', 'REL-SI', ..., 'DOUBLE-QUOTE-OPENING', 'COMMA',
       'N'], dtype='<U20')
    349         score_func_ret = self.score_func(X, y)
    350         if isinstance(score_func_ret, (list, tuple)):
    351             self.scores_, self.pvalues_ = score_func_ret
    352             self.pvalues_ = np.asarray(self.pvalues_)

...........................................................................
/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/feature_selection/univariate_selection.py in _check_params(self=SelectKBest(k=None, score_func=<function chi2 at 0x7f956de80c80>), X=<159981x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>, y=array(['NUM-ROM', 'ABBR', 'REL-SI', ..., 'DOUBLE-QUOTE-OPENING', 'COMMA',
       'N'], dtype='<U20'))
    485     def __init__(self, score_func=f_classif, k=10):
    486         super(SelectKBest, self).__init__(score_func)
    487         self.k = k
    488 
    489     def _check_params(self, X, y):
--> 490         if not (self.k == "all" or 0 <= self.k <= X.shape[1]):
        self.k = None
        X.shape = (159981, 50228)
    491             raise ValueError("k should be >=0, <= n_features; got %r."
    492                              "Use k='all' to return all features."
    493                              % self.k)
    494 

TypeError: '<=' not supported between instances of 'int' and 'NoneType'
___________________________________________________________________________

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "swahiliFullTrain.py", line 129, in <module>
    main()
  File "swahiliFullTrain.py", line 76, in main
    trainPosCls.fit(trainData, trainPOS)
  File "/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/grid_search.py", line 838, in fit
    return self._fit(X, y, ParameterGrid(self.param_grid))
  File "/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/grid_search.py", line 574, in _fit
    for parameters in parameter_iterable
  File "/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/externals/joblib/parallel.py", line 789, in __call__
    self.retrieve()
  File "/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/externals/joblib/parallel.py", line 740, in retrieve
    raise exception
sklearn.externals.joblib.my_exceptions.JoblibTypeError: JoblibTypeError
___________________________________________________________________________
Multiprocessing exception:
...........................................................................
/home/kenneth/SwahiliMorphemeTagging/swahiliFullTrain.py in <module>()
    124         tempPred = verbClassifiers[target].predict(testVerbs['data'])
    125         print("Classification results for " + target + " on test")
    126         print(classification_report(testVerbs[target], tempPred))
    127 
    128 if __name__ == "__main__":
--> 129     main()

...........................................................................
/home/kenneth/SwahiliMorphemeTagging/swahiliFullTrain.py in main()
     71     trainPosCls = GridSearchCV(pipeline, param_grid, cv=5, n_jobs=numProcs, verbose=4)
     72     print("Fitting on " + str(len(trainPOS)) + " words")
     73     print("There are " + str(len([pos for pos in trainPOS if pos == 'V'])) + " verbs")
     74     print("There are " + str(len([pos for pos in trainPOS if pos == 'N'])) + " nouns")
     75     
---> 76     trainPosCls.fit(trainData, trainPOS)
        trainPosCls.fit = <bound method GridSearchCV.fit of GridSearchCV(c...'2*n_jobs', refit=True, scoring=None, verbose=4)>
        trainData = <200000x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>
        trainPOS = ['PRON', 'POSS-PRON', 'GEN-CON', 'COMMA', 'GEN-CON', 'N', 'LEFT-PARENTHESIS', 'CC', 'CONJ', 'COMMA', 'GEN-CON', 'N', 'N', 'PROPNAME', 'N', 'N', 'N', 'PREP', 'COMMA', 'PRON', ...]
     77     print("\nBest parameters found on training set: \n")
     78     print(trainPosCls.best_params_)
     79     print()
     80     #The next two lines were created by Kenneth Steimel for general use, not necessarily for this project

...........................................................................
/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/grid_search.py in fit(self=GridSearchCV(cv=5, error_score='raise',
       e...='2*n_jobs', refit=True, scoring=None, verbose=4), X=<200000x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>, y=['PRON', 'POSS-PRON', 'GEN-CON', 'COMMA', 'GEN-CON', 'N', 'LEFT-PARENTHESIS', 'CC', 'CONJ', 'COMMA', 'GEN-CON', 'N', 'N', 'PROPNAME', 'N', 'N', 'N', 'PREP', 'COMMA', 'PRON', ...])
    833         y : array-like, shape = [n_samples] or [n_samples, n_output], optional
    834             Target relative to X for classification or regression;
    835             None for unsupervised learning.
    836 
    837         """
--> 838         return self._fit(X, y, ParameterGrid(self.param_grid))
        self._fit = <bound method BaseSearchCV._fit of GridSearchCV(...'2*n_jobs', refit=True, scoring=None, verbose=4)>
        X = <200000x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>
        y = ['PRON', 'POSS-PRON', 'GEN-CON', 'COMMA', 'GEN-CON', 'N', 'LEFT-PARENTHESIS', 'CC', 'CONJ', 'COMMA', 'GEN-CON', 'N', 'N', 'PROPNAME', 'N', 'N', 'N', 'PREP', 'COMMA', 'PRON', ...]
        self.param_grid = {'classify__C': [0.1, 1, 10], 'reduce_dim__k': [None, 1000, 2000, 3000, 4000, 5000, 6000, 10000]}
    839 
    840 
    841 class RandomizedSearchCV(BaseSearchCV):
    842     """Randomized search on hyper parameters.

...........................................................................
/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/grid_search.py in _fit(self=GridSearchCV(cv=5, error_score='raise',
       e...='2*n_jobs', refit=True, scoring=None, verbose=4), X=<200000x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>, y=['PRON', 'POSS-PRON', 'GEN-CON', 'COMMA', 'GEN-CON', 'N', 'LEFT-PARENTHESIS', 'CC', 'CONJ', 'COMMA', 'GEN-CON', 'N', 'N', 'PROPNAME', 'N', 'N', 'N', 'PREP', 'COMMA', 'PRON', ...], parameter_iterable=<sklearn.grid_search.ParameterGrid object>)
    569         )(
    570             delayed(_fit_and_score)(clone(base_estimator), X, y, self.scorer_,
    571                                     train, test, self.verbose, parameters,
    572                                     self.fit_params, return_parameters=True,
    573                                     error_score=self.error_score)
--> 574                 for parameters in parameter_iterable
        parameters = undefined
        parameter_iterable = <sklearn.grid_search.ParameterGrid object>
    575                 for train, test in cv)
    576 
    577         # Out is a list of triplet: score, estimator, n_test_samples
    578         n_fits = len(out)

...........................................................................
/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=16), iterable=<generator object BaseSearchCV._fit.<locals>.<genexpr>>)
    784             if pre_dispatch == "all" or n_jobs == 1:
    785                 # The iterable was consumed all at once by the above for loop.
    786                 # No need to wait for async callbacks to trigger to
    787                 # consumption.
    788                 self._iterating = False
--> 789             self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=16)>
    790             # Make sure that we get a last message telling us we are done
    791             elapsed_time = time.time() - self._start_time
    792             self._print('Done %3i out of %3i | elapsed: %s finished',
    793                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Sub-process traceback:
---------------------------------------------------------------------------
TypeError                                          Tue May  8 02:27:25 2018
PID: 521                  Python 3.6.3: /opt/intel/intelpython3/bin/python3
...........................................................................
/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    126     def __init__(self, iterator_slice):
    127         self.items = list(iterator_slice)
    128         self._size = len(self.items)
    129 
    130     def __call__(self):
--> 131         return [func(*args, **kwargs) for func, args, kwargs in self.items]
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('reduce_dim',...random_state=None, tol=0.0001,
     verbose=0))]), <200000x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>, ['PRON', 'POSS-PRON', 'GEN-CON', 'COMMA', 'GEN-CON', 'N', 'LEFT-PARENTHESIS', 'CC', 'CONJ', 'COMMA', 'GEN-CON', 'N', 'N', 'PROPNAME', 'N', 'N', 'N', 'PREP', 'COMMA', 'PRON', ...], <function _passthrough_scorer>, memmap([ 18181,  27468,  33209, ..., 199997, 199998, 199999]), array([     0,      1,      2, ...,  70782,  71719, 122460]), 4, {'classify__C': 0.1, 'reduce_dim__k': None}, {}), {'error_score': 'raise', 'return_parameters': True})]
    132 
    133     def __len__(self):
    134         return self._size
    135 

...........................................................................
/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/externals/joblib/parallel.py in <listcomp>(.0=<list_iterator object>)
    126     def __init__(self, iterator_slice):
    127         self.items = list(iterator_slice)
    128         self._size = len(self.items)
    129 
    130     def __call__(self):
--> 131         return [func(*args, **kwargs) for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('reduce_dim',...random_state=None, tol=0.0001,
     verbose=0))]), <200000x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>, ['PRON', 'POSS-PRON', 'GEN-CON', 'COMMA', 'GEN-CON', 'N', 'LEFT-PARENTHESIS', 'CC', 'CONJ', 'COMMA', 'GEN-CON', 'N', 'N', 'PROPNAME', 'N', 'N', 'N', 'PREP', 'COMMA', 'PRON', ...], <function _passthrough_scorer>, memmap([ 18181,  27468,  33209, ..., 199997, 199998, 199999]), array([     0,      1,      2, ...,  70782,  71719, 122460]), 4, {'classify__C': 0.1, 'reduce_dim__k': None}, {})
        kwargs = {'error_score': 'raise', 'return_parameters': True}
    132 
    133     def __len__(self):
    134         return self._size
    135 

...........................................................................
/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/cross_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('reduce_dim',...random_state=None, tol=0.0001,
     verbose=0))]), X=<200000x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>, y=['PRON', 'POSS-PRON', 'GEN-CON', 'COMMA', 'GEN-CON', 'N', 'LEFT-PARENTHESIS', 'CC', 'CONJ', 'COMMA', 'GEN-CON', 'N', 'N', 'PROPNAME', 'N', 'N', 'N', 'PREP', 'COMMA', 'PRON', ...], scorer=<function _passthrough_scorer>, train=memmap([ 18181,  27468,  33209, ..., 199997, 199998, 199999]), test=array([     0,      1,      2, ...,  70782,  71719, 122460]), verbose=4, parameters={'classify__C': 0.1, 'reduce_dim__k': None}, fit_params={}, return_train_score=False, return_parameters=True, error_score='raise')
   1670 
   1671     try:
   1672         if y_train is None:
   1673             estimator.fit(X_train, **fit_params)
   1674         else:
-> 1675             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...andom_state=None, tol=0.0001,
     verbose=0))])>
        X_train = <159981x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>
        y_train = ['NUM-ROM', 'ABBR', 'REL-SI', 'ABBR', 'RIGHT-PARENTHESIS', 'DOUBLE-QUOTE-CLOSING', 'AMPERSAND', 'DOUBLE-QUOTE-CLOSING', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'CC', ...]
        fit_params = {}
   1676 
   1677     except Exception as e:
   1678         if error_score == 'raise':
   1679             raise

...........................................................................
/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('reduce_dim',...random_state=None, tol=0.0001,
     verbose=0))]), X=<159981x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>, y=['NUM-ROM', 'ABBR', 'REL-SI', 'ABBR', 'RIGHT-PARENTHESIS', 'DOUBLE-QUOTE-CLOSING', 'AMPERSAND', 'DOUBLE-QUOTE-CLOSING', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'CC', ...], **fit_params={})
    243         Returns
    244         -------
    245         self : Pipeline
    246             This estimator
    247         """
--> 248         Xt, fit_params = self._fit(X, y, **fit_params)
        Xt = undefined
        fit_params = {}
        self._fit = <bound method Pipeline._fit of Pipeline(memory=N...andom_state=None, tol=0.0001,
     verbose=0))])>
        X = <159981x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>
        y = ['NUM-ROM', 'ABBR', 'REL-SI', 'ABBR', 'RIGHT-PARENTHESIS', 'DOUBLE-QUOTE-CLOSING', 'AMPERSAND', 'DOUBLE-QUOTE-CLOSING', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'CC', ...]
    249         if self._final_estimator is not None:
    250             self._final_estimator.fit(Xt, y, **fit_params)
    251         return self
    252 

...........................................................................
/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/pipeline.py in _fit(self=Pipeline(memory=None,
     steps=[('reduce_dim',...random_state=None, tol=0.0001,
     verbose=0))]), X=<159981x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>, y=['NUM-ROM', 'ABBR', 'REL-SI', 'ABBR', 'RIGHT-PARENTHESIS', 'DOUBLE-QUOTE-CLOSING', 'AMPERSAND', 'DOUBLE-QUOTE-CLOSING', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'CC', ...], **fit_params={})
    208                 else:
    209                     cloned_transformer = clone(transformer)
    210                 # Fit or load from cache the current transfomer
    211                 Xt, fitted_transformer = fit_transform_one_cached(
    212                     cloned_transformer, None, Xt, y,
--> 213                     **fit_params_steps[name])
        fit_params_steps = {'classify': {}, 'reduce_dim': {}}
        name = 'reduce_dim'
    214                 # Replace the transformer of the step with the fitted
    215                 # transformer. This is necessary when loading the transformer
    216                 # from the cache.
    217                 self.steps[step_idx] = (name, fitted_transformer)

...........................................................................
/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/externals/joblib/memory.py in __call__(self=NotMemorizedFunc(func=<function _fit_transform_one at 0x7f95553a31e0>), *args=(SelectKBest(k=None, score_func=<function chi2 at 0x7f956de80c80>), None, <159981x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>, ['NUM-ROM', 'ABBR', 'REL-SI', 'ABBR', 'RIGHT-PARENTHESIS', 'DOUBLE-QUOTE-CLOSING', 'AMPERSAND', 'DOUBLE-QUOTE-CLOSING', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'CC', ...]), **kwargs={})
    357     # Should be a light as possible (for speed)
    358     def __init__(self, func):
    359         self.func = func
    360 
    361     def __call__(self, *args, **kwargs):
--> 362         return self.func(*args, **kwargs)
        self.func = <function _fit_transform_one>
        args = (SelectKBest(k=None, score_func=<function chi2 at 0x7f956de80c80>), None, <159981x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>, ['NUM-ROM', 'ABBR', 'REL-SI', 'ABBR', 'RIGHT-PARENTHESIS', 'DOUBLE-QUOTE-CLOSING', 'AMPERSAND', 'DOUBLE-QUOTE-CLOSING', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'CC', ...])
        kwargs = {}
    363 
    364     def call_and_shelve(self, *args, **kwargs):
    365         return NotMemorizedResult(self.func(*args, **kwargs))
    366 

...........................................................................
/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/pipeline.py in _fit_transform_one(transformer=SelectKBest(k=None, score_func=<function chi2 at 0x7f956de80c80>), weight=None, X=<159981x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>, y=['NUM-ROM', 'ABBR', 'REL-SI', 'ABBR', 'RIGHT-PARENTHESIS', 'DOUBLE-QUOTE-CLOSING', 'AMPERSAND', 'DOUBLE-QUOTE-CLOSING', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'CC', ...], **fit_params={})
    576 
    577 
    578 def _fit_transform_one(transformer, weight, X, y,
    579                        **fit_params):
    580     if hasattr(transformer, 'fit_transform'):
--> 581         res = transformer.fit_transform(X, y, **fit_params)
        res = undefined
        transformer.fit_transform = <bound method TransformerMixin.fit_transform of ...e, score_func=<function chi2 at 0x7f956de80c80>)>
        X = <159981x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>
        y = ['NUM-ROM', 'ABBR', 'REL-SI', 'ABBR', 'RIGHT-PARENTHESIS', 'DOUBLE-QUOTE-CLOSING', 'AMPERSAND', 'DOUBLE-QUOTE-CLOSING', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'CC', ...]
        fit_params = {}
    582     else:
    583         res = transformer.fit(X, y, **fit_params).transform(X)
    584     # if we have a weight for this transformer, multiply output
    585     if weight is None:

...........................................................................
/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/base.py in fit_transform(self=SelectKBest(k=None, score_func=<function chi2 at 0x7f956de80c80>), X=<159981x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>, y=['NUM-ROM', 'ABBR', 'REL-SI', 'ABBR', 'RIGHT-PARENTHESIS', 'DOUBLE-QUOTE-CLOSING', 'AMPERSAND', 'DOUBLE-QUOTE-CLOSING', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'CC', ...], **fit_params={})
    515         if y is None:
    516             # fit method of arity 1 (unsupervised transformation)
    517             return self.fit(X, **fit_params).transform(X)
    518         else:
    519             # fit method of arity 2 (supervised transformation)
--> 520             return self.fit(X, y, **fit_params).transform(X)
        self.fit = <bound method _BaseFilter.fit of SelectKBest(k=None, score_func=<function chi2 at 0x7f956de80c80>)>
        X = <159981x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>
        y = ['NUM-ROM', 'ABBR', 'REL-SI', 'ABBR', 'RIGHT-PARENTHESIS', 'DOUBLE-QUOTE-CLOSING', 'AMPERSAND', 'DOUBLE-QUOTE-CLOSING', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'RIGHT-PARENTHESIS', 'CC', 'CC', 'CC', 'CC', 'CC', ...]
        fit_params.transform = undefined
    521 
    522 
    523 class DensityMixin(object):
    524     """Mixin class for all density estimators in scikit-learn."""

...........................................................................
/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/feature_selection/univariate_selection.py in fit(self=SelectKBest(k=None, score_func=<function chi2 at 0x7f956de80c80>), X=<159981x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>, y=array(['NUM-ROM', 'ABBR', 'REL-SI', ..., 'DOUBLE-QUOTE-OPENING', 'COMMA',
       'N'], dtype='<U20'))
    343         if not callable(self.score_func):
    344             raise TypeError("The score function should be a callable, %s (%s) "
    345                             "was passed."
    346                             % (self.score_func, type(self.score_func)))
    347 
--> 348         self._check_params(X, y)
        self._check_params = <bound method SelectKBest._check_params of Selec...e, score_func=<function chi2 at 0x7f956de80c80>)>
        X = <159981x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>
        y = array(['NUM-ROM', 'ABBR', 'REL-SI', ..., 'DOUBLE-QUOTE-OPENING', 'COMMA',
       'N'], dtype='<U20')
    349         score_func_ret = self.score_func(X, y)
    350         if isinstance(score_func_ret, (list, tuple)):
    351             self.scores_, self.pvalues_ = score_func_ret
    352             self.pvalues_ = np.asarray(self.pvalues_)

...........................................................................
/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/feature_selection/univariate_selection.py in _check_params(self=SelectKBest(k=None, score_func=<function chi2 at 0x7f956de80c80>), X=<159981x50228 sparse matrix of type '<class 'num... stored elements in Compressed Sparse Row format>, y=array(['NUM-ROM', 'ABBR', 'REL-SI', ..., 'DOUBLE-QUOTE-OPENING', 'COMMA',
       'N'], dtype='<U20'))
    485     def __init__(self, score_func=f_classif, k=10):
    486         super(SelectKBest, self).__init__(score_func)
    487         self.k = k
    488 
    489     def _check_params(self, X, y):
--> 490         if not (self.k == "all" or 0 <= self.k <= X.shape[1]):
        self.k = None
        X.shape = (159981, 50228)
    491             raise ValueError("k should be >=0, <= n_features; got %r."
    492                              "Use k='all' to return all features."
    493                              % self.k)
    494 

TypeError: '<=' not supported between instances of 'int' and 'NoneType'
___________________________________________________________________________
kenneth@ml:~/SwahiliMorphemeTagging$ python3 swahiliFullTrain.py outputTrain outputTTest -n 16M:~/SwahiliMorphemeTagging$ exit[K
[KMkenneth@ml:~/SwahiliMorphemeTagging$ exit[39@mv screenlog.0 LinearSVCLog200000words.textkenneth@ml:~/SwahiliMorphemeTagging$ exit[Kpython3 swahiliFullTrain.py outputTrain outputTTest -n 16M:~/SwahiliMorphemeTagging$ [K
[KMkenneth@ml:~/SwahiliMorphemeTagging$ kenneth@ml:~/SwahiliMorphemeTagging$ exit[2Plscd ..vi swahiliFullTrain.py ls[Kscreen -L ls[Kvi swahiliFullTrain.py cd ..[K[3Plsexit[Kpython3 swahiliFullTrain.py outputTrain output TEst   est -n 16
/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/cross_validation.py:41: DeprecationWarning: This module was deprecated in version 0.18 in favor of the model_selection module into which all the refactored classes and functions are moved. Also note that the interface of the new CV iterators are different from that of this module. This module will be removed in 0.20.
  "This module will be removed in 0.20.", DeprecationWarning)
/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/grid_search.py:42: DeprecationWarning: This module was deprecated in version 0.18 in favor of the model_selection module into which all the refactored classes and functions are moved. This module will be removed in 0.20.
  DeprecationWarning)
Fitting on 200000 words
There are 31925 verbs
There are 57542 nouns
/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/cross_validation.py:553: Warning: The least populated class in y has only 1 members, which is too few. The minimum number of labels for any class cannot be less than n_folds=5.
  % (min_labels, self.n_folds)), Warning)
Fitting 5 folds for each of 24 candidates, totalling 120 fits
[CV] classify__C=0.1, reduce_dim__k=all ..............................
[CV] classify__C=0.1, reduce_dim__k=all ..............................
[CV] classify__C=0.1, reduce_dim__k=all ..............................
[CV] classify__C=0.1, reduce_dim__k=all ..............................
[CV] classify__C=0.1, reduce_dim__k=all ..............................
[CV] classify__C=0.1, reduce_dim__k=1000 .............................
[CV] classify__C=0.1, reduce_dim__k=1000 .............................
[CV] classify__C=0.1, reduce_dim__k=1000 .............................
[CV] classify__C=0.1, reduce_dim__k=1000 .............................
[CV] classify__C=0.1, reduce_dim__k=1000 .............................
[CV] classify__C=0.1, reduce_dim__k=2000 .............................
[CV] classify__C=0.1, reduce_dim__k=2000 .............................
[CV] classify__C=0.1, reduce_dim__k=2000 .............................
[CV] classify__C=0.1, reduce_dim__k=2000 .............................
[CV] classify__C=0.1, reduce_dim__k=2000 .............................
[CV] classify__C=0.1, reduce_dim__k=3000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=2000, score=0.901002 - 1.4min
[CV] classify__C=0.1, reduce_dim__k=3000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=2000, score=0.903094 - 1.5min
[CV] classify__C=0.1, reduce_dim__k=3000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=2000, score=0.902406 - 1.5min
[CV] classify__C=0.1, reduce_dim__k=3000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=3000, score=0.917614 - 1.5min
[CV] classify__C=0.1, reduce_dim__k=3000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=1000, score=0.864078 - 1.6min
[CV] classify__C=0.1, reduce_dim__k=4000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=2000, score=0.901650 - 1.6min
[CV] classify__C=0.1, reduce_dim__k=4000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=2000, score=0.903921 - 1.7min
[CV] classify__C=0.1, reduce_dim__k=4000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=1000, score=0.867202 - 1.8min
[CV] classify__C=0.1, reduce_dim__k=4000 .............................
[CV] ..... classify__C=0.1, reduce_dim__k=all, score=0.941278 - 1.8min
[CV] classify__C=0.1, reduce_dim__k=4000 .............................
[CV] ..... classify__C=0.1, reduce_dim__k=all, score=0.939687 - 1.9min
[CV] classify__C=0.1, reduce_dim__k=5000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=1000, score=0.872411 - 1.9min
[CV] classify__C=0.1, reduce_dim__k=5000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=1000, score=0.867465 - 2.0min
[CV] classify__C=0.1, reduce_dim__k=5000 .............................
[CV] ..... classify__C=0.1, reduce_dim__k=all, score=0.939327 - 2.1min
[CV] classify__C=0.1, reduce_dim__k=5000 .............................
[CV] ..... classify__C=0.1, reduce_dim__k=all, score=0.939260 - 2.1min
[CV] classify__C=0.1, reduce_dim__k=5000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=1000, score=0.866792 - 2.1min
[CV] classify__C=0.1, reduce_dim__k=6000 .............................
[CV] ..... classify__C=0.1, reduce_dim__k=all, score=0.939598 - 2.2min
[CV] classify__C=0.1, reduce_dim__k=6000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=3000, score=0.914117 - 1.5min
[CV] classify__C=0.1, reduce_dim__k=6000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=3000, score=0.915054 - 1.5min
[CV] classify__C=0.1, reduce_dim__k=6000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=4000, score=0.923361 - 1.5min
[CV] classify__C=0.1, reduce_dim__k=6000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=3000, score=0.914912 - 1.5min
[CV] classify__C=0.1, reduce_dim__k=10000 ............................
[CV] .... classify__C=0.1, reduce_dim__k=3000, score=0.913477 - 1.6min
[CV] classify__C=0.1, reduce_dim__k=10000 ............................
[CV] .... classify__C=0.1, reduce_dim__k=4000, score=0.922016 - 1.5min
[CV] classify__C=0.1, reduce_dim__k=10000 ............................
[CV] .... classify__C=0.1, reduce_dim__k=5000, score=0.928159 - 1.5min
[CV] classify__C=0.1, reduce_dim__k=10000 ............................
[CV] .... classify__C=0.1, reduce_dim__k=4000, score=0.921102 - 1.8min
[CV] classify__C=0.1, reduce_dim__k=10000 ............................
[CV] .... classify__C=0.1, reduce_dim__k=4000, score=0.921980 - 1.8min
[CV] classify__C=1, reduce_dim__k=all ................................
[CV] .... classify__C=0.1, reduce_dim__k=6000, score=0.930633 - 1.7min
[CV] classify__C=1, reduce_dim__k=all ................................
[CV] .... classify__C=0.1, reduce_dim__k=5000, score=0.925727 - 1.7min
[CV] classify__C=1, reduce_dim__k=all ................................
[CV] .... classify__C=0.1, reduce_dim__k=4000, score=0.922615 - 2.0min
[CV] classify__C=1, reduce_dim__k=all ................................
[CV] .... classify__C=0.1, reduce_dim__k=5000, score=0.927517 - 1.7min
[CV] classify__C=1, reduce_dim__k=all ................................
[CV] .... classify__C=0.1, reduce_dim__k=5000, score=0.926290 - 1.9min
[CV] classify__C=1, reduce_dim__k=1000 ...............................
[CV] .... classify__C=0.1, reduce_dim__k=5000, score=0.927232 - 1.9min
[CV] classify__C=1, reduce_dim__k=1000 ...............................
[CV] .... classify__C=0.1, reduce_dim__k=6000, score=0.928039 - 2.0min
[CV] classify__C=1, reduce_dim__k=1000 ...............................
[CV] ... classify__C=0.1, reduce_dim__k=10000, score=0.935606 - 1.5min
[CV] classify__C=1, reduce_dim__k=1000 ...............................
[CV] .... classify__C=0.1, reduce_dim__k=6000, score=0.929807 - 1.6min
[CV] classify__C=1, reduce_dim__k=1000 ...............................
[CV] .... classify__C=0.1, reduce_dim__k=6000, score=0.929218 - 1.6min
[CV] classify__C=1, reduce_dim__k=2000 ...............................
[CV] .... classify__C=0.1, reduce_dim__k=6000, score=0.928727 - 1.8min
[CV] classify__C=1, reduce_dim__k=2000 ...............................
[CV] ... classify__C=0.1, reduce_dim__k=10000, score=0.933377 - 1.6min
[CV] classify__C=1, reduce_dim__k=2000 ...............................
[CV] ... classify__C=0.1, reduce_dim__k=10000, score=0.933938 - 1.6min
[CV] classify__C=1, reduce_dim__k=2000 ...............................
[CV] ... classify__C=0.1, reduce_dim__k=10000, score=0.934159 - 1.5min
[CV] classify__C=1, reduce_dim__k=2000 ...............................
[CV] ... classify__C=0.1, reduce_dim__k=10000, score=0.933895 - 1.7min
[CV] classify__C=1, reduce_dim__k=3000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=1000, score=0.875909 - 5.2min
[CV] classify__C=1, reduce_dim__k=3000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=1000, score=0.870326 - 5.2min
[CV] classify__C=1, reduce_dim__k=3000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=1000, score=0.873468 - 4.6min
[CV] classify__C=1, reduce_dim__k=3000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=1000, score=0.870368 - 4.7min
[CV] classify__C=1, reduce_dim__k=3000 ...............................
[CV] ....... classify__C=1, reduce_dim__k=all, score=0.942977 - 5.8min
[CV] classify__C=1, reduce_dim__k=4000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=1000, score=0.869128 - 5.2min
[CV] classify__C=1, reduce_dim__k=4000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=2000, score=0.906252 - 4.7min
[CV] classify__C=1, reduce_dim__k=4000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=2000, score=0.906652 - 4.8min
[CV] classify__C=1, reduce_dim__k=4000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=2000, score=0.907183 - 4.7min
[CV] classify__C=1, reduce_dim__k=4000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=3000, score=0.922112 - 4.6min
[CV] classify__C=1, reduce_dim__k=5000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=2000, score=0.907618 - 5.3min
[CV] classify__C=1, reduce_dim__k=5000 ...............................
[CV] ....... classify__C=1, reduce_dim__k=all, score=0.940326 - 6.3min
[CV] classify__C=1, reduce_dim__k=5000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=2000, score=0.909543 - 5.4min
[CV] classify__C=1, reduce_dim__k=5000 ...............................
[CV] ....... classify__C=1, reduce_dim__k=all, score=0.940335 - 6.6min
[CV] classify__C=1, reduce_dim__k=5000 ...............................
[CV] ....... classify__C=1, reduce_dim__k=all, score=0.940662 - 6.6min
[CV] classify__C=1, reduce_dim__k=6000 ...............................
[CV] ....... classify__C=1, reduce_dim__k=all, score=0.940648 - 6.7min
[CV] classify__C=1, reduce_dim__k=6000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=4000, score=0.927160 - 4.7min
[CV] classify__C=1, reduce_dim__k=6000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=3000, score=0.918041 - 5.3min
[CV] classify__C=1, reduce_dim__k=6000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=4000, score=0.925456 - 4.8min
[CV] classify__C=1, reduce_dim__k=6000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=3000, score=0.919855 - 5.1min
[CV] classify__C=1, reduce_dim__k=10000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=4000, score=0.925667 - 4.8min
[CV] classify__C=1, reduce_dim__k=10000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=3000, score=0.919264 - 5.1min
[CV] classify__C=1, reduce_dim__k=10000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=3000, score=0.918602 - 5.4min
[CV] classify__C=1, reduce_dim__k=10000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=5000, score=0.931657 - 4.9min
[CV] classify__C=1, reduce_dim__k=10000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=5000, score=0.930127 - 4.8min
[CV] classify__C=10, reduce_dim__k=all ...............................
[CV] ...... classify__C=1, reduce_dim__k=4000, score=0.924727 - 5.6min
[Parallel(n_jobs=16)]: Done  66 tasks      | elapsed: 15.1min
[CV] classify__C=10, reduce_dim__k=all ...............................
[CV] ...... classify__C=1, reduce_dim__k=4000, score=0.925115 - 5.8min
[CV] classify__C=10, reduce_dim__k=all ...............................
[CV] ...... classify__C=1, reduce_dim__k=6000, score=0.934081 - 4.9min
[CV] classify__C=10, reduce_dim__k=all ...............................
[CV] ...... classify__C=1, reduce_dim__k=5000, score=0.929932 - 5.6min
[CV] ...... classify__C=1, reduce_dim__k=5000, score=0.929864 - 5.7min
[CV] classify__C=10, reduce_dim__k=all ...............................
[CV] classify__C=10, reduce_dim__k=1000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=5000, score=0.929793 - 5.7min
[CV] classify__C=10, reduce_dim__k=1000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=6000, score=0.931914 - 5.8min
[CV] classify__C=10, reduce_dim__k=1000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=6000, score=0.931652 - 5.0min
[CV] classify__C=10, reduce_dim__k=1000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=6000, score=0.931894 - 4.9min
[CV] classify__C=10, reduce_dim__k=1000 ..............................
[CV] ..... classify__C=1, reduce_dim__k=10000, score=0.935777 - 4.9min
[CV] classify__C=10, reduce_dim__k=2000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=6000, score=0.932558 - 5.4min
[CV] classify__C=10, reduce_dim__k=2000 ..............................
[CV] ..... classify__C=1, reduce_dim__k=10000, score=0.938404 - 5.7min
[CV] classify__C=10, reduce_dim__k=2000 ..............................
[CV] ..... classify__C=1, reduce_dim__k=10000, score=0.937084 - 5.7min
[CV] classify__C=10, reduce_dim__k=2000 ..............................
[CV] ..... classify__C=1, reduce_dim__k=10000, score=0.937288 - 5.9min
[CV] classify__C=10, reduce_dim__k=2000 ..............................
[CV] ..... classify__C=1, reduce_dim__k=10000, score=0.937872 - 5.8min
[CV] classify__C=10, reduce_dim__k=3000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=1000, score=0.871076 - 6.4min
[CV] classify__C=10, reduce_dim__k=3000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=1000, score=0.874185 - 7.3min
[CV] classify__C=10, reduce_dim__k=3000 ..............................
[CV] ...... classify__C=10, reduce_dim__k=all, score=0.940853 - 8.4min
[CV] classify__C=10, reduce_dim__k=3000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=1000, score=0.868778 - 7.4min
[CV] classify__C=10, reduce_dim__k=3000 ..............................
[CV] ...... classify__C=10, reduce_dim__k=all, score=0.937984 - 8.5min
[CV] classify__C=10, reduce_dim__k=4000 ..............................
[CV] ...... classify__C=10, reduce_dim__k=all, score=0.938537 - 9.7min
[CV] classify__C=10, reduce_dim__k=4000 ..............................
[CV] ...... classify__C=10, reduce_dim__k=all, score=0.937927 - 9.6min
[CV] classify__C=10, reduce_dim__k=4000 ..............................
[CV] ...... classify__C=10, reduce_dim__k=all, score=0.938672 - 9.2min
[CV] classify__C=10, reduce_dim__k=4000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=2000, score=0.909993 - 6.3min
[CV] classify__C=10, reduce_dim__k=4000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=1000, score=0.873993 - 6.5min
[CV] classify__C=10, reduce_dim__k=5000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=1000, score=0.871018 - 6.5min
[CV] classify__C=10, reduce_dim__k=5000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=2000, score=0.908568 - 6.4min
[CV] classify__C=10, reduce_dim__k=5000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=2000, score=0.906652 - 7.1min
[CV] classify__C=10, reduce_dim__k=5000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=2000, score=0.906577 - 7.1min
[CV] classify__C=10, reduce_dim__k=5000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=2000, score=0.906933 - 7.3min
[CV] classify__C=10, reduce_dim__k=6000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=3000, score=0.921437 - 7.2min
[CV] classify__C=10, reduce_dim__k=6000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=3000, score=0.920566 - 6.5min
[CV] classify__C=10, reduce_dim__k=6000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=3000, score=0.920214 - 6.5min
[CV] classify__C=10, reduce_dim__k=6000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=3000, score=0.920002 - 7.3min
[CV] classify__C=10, reduce_dim__k=6000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=3000, score=0.920480 - 7.4min
[CV] classify__C=10, reduce_dim__k=10000 .............................
[CV] ..... classify__C=10, reduce_dim__k=4000, score=0.926635 - 7.6min
[CV] classify__C=10, reduce_dim__k=10000 .............................
[CV] ..... classify__C=10, reduce_dim__k=4000, score=0.925052 - 6.7min
[CV] classify__C=10, reduce_dim__k=10000 .............................
[CV] ..... classify__C=10, reduce_dim__k=4000, score=0.926815 - 7.6min
[CV] classify__C=10, reduce_dim__k=10000 .............................
[CV] ..... classify__C=10, reduce_dim__k=4000, score=0.927057 - 7.7min
[CV] classify__C=10, reduce_dim__k=10000 .............................
[CV] ..... classify__C=10, reduce_dim__k=5000, score=0.931114 - 7.1min
[CV] ..... classify__C=10, reduce_dim__k=5000, score=0.932907 - 7.2min
[CV] ..... classify__C=10, reduce_dim__k=5000, score=0.929827 - 7.1min
[CV] ..... classify__C=10, reduce_dim__k=4000, score=0.924891 - 7.7min
[CV] ..... classify__C=10, reduce_dim__k=5000, score=0.929282 - 7.4min
[CV] ..... classify__C=10, reduce_dim__k=5000, score=0.930669 - 7.3min
[CV] ..... classify__C=10, reduce_dim__k=6000, score=0.934931 - 7.8min
[CV] ..... classify__C=10, reduce_dim__k=6000, score=0.932738 - 7.9min
[CV] ..... classify__C=10, reduce_dim__k=6000, score=0.932952 - 6.9min
[CV] ..... classify__C=10, reduce_dim__k=6000, score=0.932533 - 7.0min
[CV] .... classify__C=10, reduce_dim__k=10000, score=0.938579 - 6.7min
[CV] .... classify__C=10, reduce_dim__k=10000, score=0.935338 - 6.5min
[CV] ..... classify__C=10, reduce_dim__k=6000, score=0.932395 - 7.5min
[CV] .... classify__C=10, reduce_dim__k=10000, score=0.936377 - 6.4min
[CV] .... classify__C=10, reduce_dim__k=10000, score=0.935834 - 5.8min
[CV] .... classify__C=10, reduce_dim__k=10000, score=0.935396 - 5.8min
[Parallel(n_jobs=16)]: Done 120 out of 120 | elapsed: 38.4min remaining:    0.0s
[Parallel(n_jobs=16)]: Done 120 out of 120 | elapsed: 38.4min finished

Best parameters found on training set: 

{'classify__C': 1, 'reduce_dim__k': 'all'}

Grid scores on training set:

0.9398 (+/-0.0015) for {'classify__C': 0.1, 'reduce_dim__k': 'all'}
0.8676 (+/-0.0054) for {'classify__C': 0.1, 'reduce_dim__k': 1000}
0.9024 (+/-0.0021) for {'classify__C': 0.1, 'reduce_dim__k': 2000}
0.9150 (+/-0.0028) for {'classify__C': 0.1, 'reduce_dim__k': 3000}
0.9222 (+/-0.0015) for {'classify__C': 0.1, 'reduce_dim__k': 4000}
0.9270 (+/-0.0017) for {'classify__C': 0.1, 'reduce_dim__k': 5000}
0.9293 (+/-0.0018) for {'classify__C': 0.1, 'reduce_dim__k': 6000}
0.9342 (+/-0.0015) for {'classify__C': 0.1, 'reduce_dim__k': 10000}
0.9410 (+/-0.0020) for {'classify__C': 1, 'reduce_dim__k': 'all'}
0.8718 (+/-0.0050) for {'classify__C': 1, 'reduce_dim__k': 1000}
0.9074 (+/-0.0023) for {'classify__C': 1, 'reduce_dim__k': 2000}
0.9196 (+/-0.0028) for {'classify__C': 1, 'reduce_dim__k': 3000}
0.9256 (+/-0.0017) for {'classify__C': 1, 'reduce_dim__k': 4000}
0.9303 (+/-0.0014) for {'classify__C': 1, 'reduce_dim__k': 5000}
0.9324 (+/-0.0018) for {'classify__C': 1, 'reduce_dim__k': 6000}
0.9373 (+/-0.0018) for {'classify__C': 1, 'reduce_dim__k': 10000}
0.9388 (+/-0.0021) for {'classify__C': 10, 'reduce_dim__k': 'all'}
0.8718 (+/-0.0041) for {'classify__C': 10, 'reduce_dim__k': 1000}
0.9077 (+/-0.0027) for {'classify__C': 10, 'reduce_dim__k': 2000}
0.9205 (+/-0.0010) for {'classify__C': 10, 'reduce_dim__k': 3000}
0.9261 (+/-0.0018) for {'classify__C': 10, 'reduce_dim__k': 4000}
0.9308 (+/-0.0025) for {'classify__C': 10, 'reduce_dim__k': 5000}
0.9331 (+/-0.0019) for {'classify__C': 10, 'reduce_dim__k': 6000}
0.9363 (+/-0.0024) for {'classify__C': 10, 'reduce_dim__k': 10000}
/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/cross_validation.py:553: Warning: The least populated class in y has only 1 members, which is too few. The minimum number of labels for any class cannot be less than n_folds=5.
  % (min_labels, self.n_folds)), Warning)
Fitting 5 folds for each of 24 candidates, totalling 120 fits
[CV] classify__C=0.1, reduce_dim__k=all ..............................
[CV] classify__C=0.1, reduce_dim__k=all ..............................
[CV] classify__C=0.1, reduce_dim__k=all ..............................
[CV] classify__C=0.1, reduce_dim__k=all ..............................
[CV] classify__C=0.1, reduce_dim__k=all ..............................
[CV] classify__C=0.1, reduce_dim__k=1000 .............................
[CV] classify__C=0.1, reduce_dim__k=1000 .............................
[CV] classify__C=0.1, reduce_dim__k=1000 .............................
[CV] classify__C=0.1, reduce_dim__k=1000 .............................
[CV] classify__C=0.1, reduce_dim__k=1000 .............................
[CV] classify__C=0.1, reduce_dim__k=2000 .............................
[CV] classify__C=0.1, reduce_dim__k=2000 .............................
[CV] classify__C=0.1, reduce_dim__k=2000 .............................
[CV] classify__C=0.1, reduce_dim__k=2000 .............................
[CV] classify__C=0.1, reduce_dim__k=2000 .............................
[CV] classify__C=0.1, reduce_dim__k=3000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=1000, score=0.821965 -  15.5s
[CV] classify__C=0.1, reduce_dim__k=3000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=1000, score=0.820595 -  16.5s
[CV] classify__C=0.1, reduce_dim__k=3000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=1000, score=0.822203 -  17.2s
[CV] classify__C=0.1, reduce_dim__k=3000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=1000, score=0.822988 -  17.7s
[CV] .... classify__C=0.1, reduce_dim__k=2000, score=0.862629 -  17.4s
[CV] classify__C=0.1, reduce_dim__k=3000 .............................
[CV] classify__C=0.1, reduce_dim__k=4000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=1000, score=0.823330 -  18.9s
[CV] classify__C=0.1, reduce_dim__k=4000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=3000, score=0.873114 -  18.7s
[CV] classify__C=0.1, reduce_dim__k=4000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=2000, score=0.862359 -  19.4s
[CV] classify__C=0.1, reduce_dim__k=4000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=2000, score=0.864467 -  20.5s
[Parallel(n_jobs=16)]: Done   9 tasks      | elapsed:   21.5s
[CV] classify__C=0.1, reduce_dim__k=4000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=2000, score=0.863953 -  21.5s
[CV] classify__C=0.1, reduce_dim__k=5000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=2000, score=0.857453 -  24.6s
[CV] classify__C=0.1, reduce_dim__k=5000 .............................
[CV] ..... classify__C=0.1, reduce_dim__k=all, score=0.892612 -  26.8s
[CV] classify__C=0.1, reduce_dim__k=5000 .............................
[CV] ..... classify__C=0.1, reduce_dim__k=all, score=0.898959 -  27.3s
[CV] classify__C=0.1, reduce_dim__k=5000 .............................
[CV] ..... classify__C=0.1, reduce_dim__k=all, score=0.897993 -  27.4s
[CV] classify__C=0.1, reduce_dim__k=5000 .............................
[CV] ..... classify__C=0.1, reduce_dim__k=all, score=0.898155 -  27.8s
[CV] classify__C=0.1, reduce_dim__k=6000 .............................
[CV] ..... classify__C=0.1, reduce_dim__k=all, score=0.895790 -  30.5s
[CV] classify__C=0.1, reduce_dim__k=6000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=3000, score=0.868825 -  18.5s
[CV] classify__C=0.1, reduce_dim__k=6000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=3000, score=0.871405 -  18.3s
[CV] classify__C=0.1, reduce_dim__k=6000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=4000, score=0.880139 -  19.9s
[CV] classify__C=0.1, reduce_dim__k=6000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=3000, score=0.872651 -  22.4s
[CV] classify__C=0.1, reduce_dim__k=10000 ............................
[CV] .... classify__C=0.1, reduce_dim__k=3000, score=0.874913 -  24.2s
[CV] classify__C=0.1, reduce_dim__k=10000 ............................
[CV] .... classify__C=0.1, reduce_dim__k=4000, score=0.880094 -  23.5s
[CV] .... classify__C=0.1, reduce_dim__k=4000, score=0.878914 -  23.2s
[CV] classify__C=0.1, reduce_dim__k=10000 ............................
[CV] classify__C=0.1, reduce_dim__k=10000 ............................
[CV] .... classify__C=0.1, reduce_dim__k=4000, score=0.876552 -  25.2s
[CV] classify__C=0.1, reduce_dim__k=10000 ............................
[CV] .... classify__C=0.1, reduce_dim__k=5000, score=0.884308 -  18.7s
[CV] classify__C=1, reduce_dim__k=all ................................
[CV] .... classify__C=0.1, reduce_dim__k=5000, score=0.887013 -  19.8s
[CV] classify__C=1, reduce_dim__k=all ................................
[CV] .... classify__C=0.1, reduce_dim__k=5000, score=0.883830 -  20.5s
[CV] classify__C=1, reduce_dim__k=all ................................
[CV] .... classify__C=0.1, reduce_dim__k=4000, score=0.882921 -  27.0s
[CV] classify__C=1, reduce_dim__k=all ................................
[CV] .... classify__C=0.1, reduce_dim__k=6000, score=0.888638 -  20.4s
[CV] classify__C=1, reduce_dim__k=all ................................
[CV] .... classify__C=0.1, reduce_dim__k=5000, score=0.880458 -  24.8s
[CV] classify__C=1, reduce_dim__k=1000 ...............................
[CV] .... classify__C=0.1, reduce_dim__k=5000, score=0.883521 -  29.7s
[CV] classify__C=1, reduce_dim__k=1000 ...............................
[CV] .... classify__C=0.1, reduce_dim__k=6000, score=0.886871 -  19.7s
[CV] classify__C=1, reduce_dim__k=1000 ...............................
[CV] .... classify__C=0.1, reduce_dim__k=6000, score=0.888396 -  19.4s
[CV] classify__C=1, reduce_dim__k=1000 ...............................
[CV] .... classify__C=0.1, reduce_dim__k=6000, score=0.883931 -  26.5s
[CV] classify__C=1, reduce_dim__k=1000 ...............................
[CV] .... classify__C=0.1, reduce_dim__k=6000, score=0.888579 -  25.4s
[CV] classify__C=1, reduce_dim__k=2000 ...............................
[CV] ... classify__C=0.1, reduce_dim__k=10000, score=0.894363 -  25.5s
[CV] classify__C=1, reduce_dim__k=2000 ...............................
[CV] ... classify__C=0.1, reduce_dim__k=10000, score=0.890008 -  23.7s
[CV] classify__C=1, reduce_dim__k=2000 ...............................
[CV] ... classify__C=0.1, reduce_dim__k=10000, score=0.893996 -  26.1s
[CV] classify__C=1, reduce_dim__k=2000 ...............................
[CV] ... classify__C=0.1, reduce_dim__k=10000, score=0.893093 -  26.6s
[CV] classify__C=1, reduce_dim__k=2000 ...............................
[CV] ... classify__C=0.1, reduce_dim__k=10000, score=0.894586 -  26.8s
[CV] classify__C=1, reduce_dim__k=3000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=1000, score=0.828197 -  45.9s
[CV] classify__C=1, reduce_dim__k=3000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=1000, score=0.833565 -  48.1s
[CV] classify__C=1, reduce_dim__k=3000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=1000, score=0.829090 -  44.8s
[CV] classify__C=1, reduce_dim__k=3000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=1000, score=0.830115 -  45.1s
[CV] classify__C=1, reduce_dim__k=3000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=1000, score=0.829909 -  48.9s
[CV] classify__C=1, reduce_dim__k=4000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=2000, score=0.872073 -  46.9s
[CV] classify__C=1, reduce_dim__k=4000 ...............................
[CV] ....... classify__C=1, reduce_dim__k=all, score=0.897398 - 1.1min
[CV] classify__C=1, reduce_dim__k=4000 ...............................
[CV] ....... classify__C=1, reduce_dim__k=all, score=0.893914 - 1.1min
[CV] classify__C=1, reduce_dim__k=4000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=2000, score=0.868190 -  49.4s
[CV] classify__C=1, reduce_dim__k=4000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=2000, score=0.866916 -  50.7s
[CV] classify__C=1, reduce_dim__k=5000 ...............................
[CV] ....... classify__C=1, reduce_dim__k=all, score=0.898590 - 1.2min
[CV] classify__C=1, reduce_dim__k=5000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=3000, score=0.881006 -  48.4s
[CV] classify__C=1, reduce_dim__k=5000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=2000, score=0.871781 -  50.9s
[CV] classify__C=1, reduce_dim__k=5000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=2000, score=0.872650 -  50.5s
[CV] classify__C=1, reduce_dim__k=5000 ...............................
[CV] ....... classify__C=1, reduce_dim__k=all, score=0.896747 - 1.3min
[CV] classify__C=1, reduce_dim__k=6000 ...............................
[CV] ....... classify__C=1, reduce_dim__k=all, score=0.895212 - 1.3min
[CV] classify__C=1, reduce_dim__k=6000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=3000, score=0.881176 -  48.1s
[CV] classify__C=1, reduce_dim__k=6000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=3000, score=0.880458 -  49.8s
[CV] classify__C=1, reduce_dim__k=6000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=3000, score=0.882747 -  48.5s
[CV] classify__C=1, reduce_dim__k=6000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=3000, score=0.881484 -  53.9s
[CV] classify__C=1, reduce_dim__k=10000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=4000, score=0.884539 -  51.8s
[CV] classify__C=1, reduce_dim__k=10000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=4000, score=0.888638 -  58.3s
[CV] classify__C=1, reduce_dim__k=10000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=4000, score=0.885699 -  50.6s
[CV] classify__C=1, reduce_dim__k=10000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=5000, score=0.888011 -  53.1s
[CV] classify__C=1, reduce_dim__k=10000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=4000, score=0.888348 -  58.4s
[CV] classify__C=10, reduce_dim__k=all ...............................
[CV] ...... classify__C=1, reduce_dim__k=5000, score=0.890173 -  51.9s
[CV] classify__C=10, reduce_dim__k=all ...............................
[CV] ...... classify__C=1, reduce_dim__k=4000, score=0.890233 -  57.5s
[CV] classify__C=10, reduce_dim__k=all ...............................
[CV] ...... classify__C=1, reduce_dim__k=5000, score=0.891154 -  58.5s
[CV] classify__C=10, reduce_dim__k=all ...............................
[CV] ...... classify__C=1, reduce_dim__k=5000, score=0.889179 -  58.8s
[CV] classify__C=10, reduce_dim__k=all ...............................
[CV] ...... classify__C=1, reduce_dim__k=5000, score=0.891539 -  58.9s
[CV] classify__C=10, reduce_dim__k=1000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=6000, score=0.889574 - 1.1min
[CV] classify__C=10, reduce_dim__k=1000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=6000, score=0.895924 - 1.2min
[CV] classify__C=10, reduce_dim__k=1000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=6000, score=0.889962 -  55.5s
[CV] classify__C=10, reduce_dim__k=1000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=6000, score=0.893454 -  55.2s
[CV] classify__C=10, reduce_dim__k=1000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=6000, score=0.891998 - 1.0min
[CV] classify__C=10, reduce_dim__k=2000 ..............................
[CV] ..... classify__C=1, reduce_dim__k=10000, score=0.897745 - 1.1min
[CV] classify__C=10, reduce_dim__k=2000 ..............................
[CV] ..... classify__C=1, reduce_dim__k=10000, score=0.891223 - 1.0min
[CV] classify__C=10, reduce_dim__k=2000 ..............................
[CV] ..... classify__C=1, reduce_dim__k=10000, score=0.893789 - 1.0min
[CV] classify__C=10, reduce_dim__k=2000 ..............................
[CV] ..... classify__C=1, reduce_dim__k=10000, score=0.895456 - 1.0min
[CV] classify__C=10, reduce_dim__k=2000 ..............................
[CV] ..... classify__C=1, reduce_dim__k=10000, score=0.894170 - 1.1min
[CV] classify__C=10, reduce_dim__k=3000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=1000, score=0.832784 - 1.1min
[CV] classify__C=10, reduce_dim__k=3000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=1000, score=0.830480 -  56.1s
[Parallel(n_jobs=16)]: Done  82 tasks      | elapsed:  4.2min
[CV] classify__C=10, reduce_dim__k=3000 ..............................
[CV] ...... classify__C=10, reduce_dim__k=all, score=0.897745 - 1.4min
[CV] classify__C=10, reduce_dim__k=3000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=1000, score=0.830811 -  55.4s
[CV] classify__C=10, reduce_dim__k=3000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=1000, score=0.829561 -  56.6s
[CV] classify__C=10, reduce_dim__k=4000 ..............................
[CV] ...... classify__C=10, reduce_dim__k=all, score=0.894344 - 1.5min
[CV] classify__C=10, reduce_dim__k=4000 ..............................
[CV] ...... classify__C=10, reduce_dim__k=all, score=0.892265 - 1.5min
[CV] ..... classify__C=10, reduce_dim__k=1000, score=0.829065 - 1.2min
[CV] classify__C=10, reduce_dim__k=4000 ..............................
[CV] classify__C=10, reduce_dim__k=4000 ..............................
[CV] ...... classify__C=10, reduce_dim__k=all, score=0.894572 - 1.6min
[CV] classify__C=10, reduce_dim__k=4000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=2000, score=0.870512 - 1.1min
[CV] classify__C=10, reduce_dim__k=5000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=2000, score=0.870102 -  50.7s
[CV] classify__C=10, reduce_dim__k=5000 ..............................
[CV] ...... classify__C=10, reduce_dim__k=all, score=0.897023 - 1.6min
[CV] classify__C=10, reduce_dim__k=5000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=2000, score=0.871173 -  51.6s
[CV] classify__C=10, reduce_dim__k=5000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=2000, score=0.868999 - 1.0min
[CV] classify__C=10, reduce_dim__k=5000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=2000, score=0.872911 -  51.1s
[CV] classify__C=10, reduce_dim__k=6000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=3000, score=0.880572 - 1.0min
[CV] classify__C=10, reduce_dim__k=6000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=3000, score=0.882179 -  52.3s
[CV] classify__C=10, reduce_dim__k=6000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=3000, score=0.879156 - 1.0min
[CV] classify__C=10, reduce_dim__k=6000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=3000, score=0.883444 -  54.5s
[CV] classify__C=10, reduce_dim__k=6000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=3000, score=0.881872 -  60.0s
[CV] classify__C=10, reduce_dim__k=10000 .............................
[CV] ..... classify__C=10, reduce_dim__k=4000, score=0.887164 -  57.9s
[CV] classify__C=10, reduce_dim__k=10000 .............................
[CV] ..... classify__C=10, reduce_dim__k=4000, score=0.886958 -  56.8s
[CV] classify__C=10, reduce_dim__k=10000 .............................
[CV] ..... classify__C=10, reduce_dim__k=4000, score=0.884365 - 1.1min
[CV] classify__C=10, reduce_dim__k=10000 .............................
[CV] ..... classify__C=10, reduce_dim__k=4000, score=0.883786 - 1.1min
[CV] classify__C=10, reduce_dim__k=10000 .............................
[CV] ..... classify__C=10, reduce_dim__k=4000, score=0.883879 - 1.1min
[CV] ..... classify__C=10, reduce_dim__k=5000, score=0.885754 - 1.0min
[CV] ..... classify__C=10, reduce_dim__k=5000, score=0.889478 - 1.1min
[CV] ..... classify__C=10, reduce_dim__k=5000, score=0.886395 - 1.0min
[CV] ..... classify__C=10, reduce_dim__k=5000, score=0.891154 - 1.1min
[CV] ..... classify__C=10, reduce_dim__k=6000, score=0.892194 - 1.1min
[CV] ..... classify__C=10, reduce_dim__k=5000, score=0.890233 - 1.1min
[CV] ..... classify__C=10, reduce_dim__k=6000, score=0.890260 -  57.7s
[CV] ..... classify__C=10, reduce_dim__k=6000, score=0.885754 - 1.1min
[CV] ..... classify__C=10, reduce_dim__k=6000, score=0.886308 - 1.0min
[CV] ..... classify__C=10, reduce_dim__k=6000, score=0.891974 - 1.0min
[CV] .... classify__C=10, reduce_dim__k=10000, score=0.892541 - 1.0min
[CV] .... classify__C=10, reduce_dim__k=10000, score=0.891650 -  58.0s
[CV] .... classify__C=10, reduce_dim__k=10000, score=0.891104 -  54.0s
[CV] .... classify__C=10, reduce_dim__k=10000, score=0.888445 - 1.1min
[CV] .... classify__C=10, reduce_dim__k=10000, score=0.889962 - 1.0min
[Parallel(n_jobs=16)]: Done 120 out of 120 | elapsed:  6.5min finished

Best parameters found on training set for noun class classification: 

{'classify__C': 0.1, 'reduce_dim__k': 'all'}
{'TAM=NARR', 'TAM=PR', 'TAM=PERF', 'TAM=NEG', 'TAM=PAST-NEG', '-', 'TAM=COND-NEG', 'TAM=PAST', 'TAM=COND', 'TAM=FUT', 'TAM=SBJN'}
Fitting 5 folds for each of 24 candidates, totalling 120 fits
[CV] classify__C=0.1, reduce_dim__k=all ..............................
[CV] classify__C=0.1, reduce_dim__k=all ..............................
[CV] classify__C=0.1, reduce_dim__k=all ..............................
[CV] classify__C=0.1, reduce_dim__k=all ..............................
[CV] classify__C=0.1, reduce_dim__k=all ..............................
[CV] classify__C=0.1, reduce_dim__k=1000 .............................
[CV] classify__C=0.1, reduce_dim__k=1000 .............................
[CV] classify__C=0.1, reduce_dim__k=1000 .............................
[CV] classify__C=0.1, reduce_dim__k=1000 .............................
[CV] classify__C=0.1, reduce_dim__k=1000 .............................
[CV] classify__C=0.1, reduce_dim__k=2000 .............................
[CV] classify__C=0.1, reduce_dim__k=2000 .............................
[CV] classify__C=0.1, reduce_dim__k=2000 .............................
[CV] classify__C=0.1, reduce_dim__k=2000 .............................
[CV] classify__C=0.1, reduce_dim__k=2000 .............................
[CV] classify__C=0.1, reduce_dim__k=3000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=1000, score=0.952866 -   2.7s
[CV] classify__C=0.1, reduce_dim__k=3000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=1000, score=0.956774 -   2.7s
[CV] .... classify__C=0.1, reduce_dim__k=1000, score=0.959260 -   2.7s
[CV] classify__C=0.1, reduce_dim__k=3000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=1000, score=0.955507 -   2.7s
[CV] .... classify__C=0.1, reduce_dim__k=2000, score=0.958190 -   2.6s
[CV] classify__C=0.1, reduce_dim__k=3000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=2000, score=0.966505 -   2.7s
[CV] classify__C=0.1, reduce_dim__k=3000 .............................
[CV] classify__C=0.1, reduce_dim__k=4000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=1000, score=0.961653 -   3.0s
[CV] .... classify__C=0.1, reduce_dim__k=2000, score=0.962400 -   2.7s
[CV] classify__C=0.1, reduce_dim__k=4000 .............................
[CV] classify__C=0.1, reduce_dim__k=4000 .............................
[CV] classify__C=0.1, reduce_dim__k=4000 .............................
[CV] ..... classify__C=0.1, reduce_dim__k=all, score=0.965236 -   3.6s
[CV] .... classify__C=0.1, reduce_dim__k=2000, score=0.964448 -   3.2s
[Parallel(n_jobs=16)]: Done   9 tasks      | elapsed:    3.7s
[CV] ..... classify__C=0.1, reduce_dim__k=all, score=0.970887 -   3.7s
[CV] .... classify__C=0.1, reduce_dim__k=2000, score=0.968035 -   3.1s
[CV] classify__C=0.1, reduce_dim__k=4000 .............................
[CV] classify__C=0.1, reduce_dim__k=5000 .............................
[CV] classify__C=0.1, reduce_dim__k=5000 .............................
[CV] classify__C=0.1, reduce_dim__k=5000 .............................
[CV] ..... classify__C=0.1, reduce_dim__k=all, score=0.972893 -   3.7s
[CV] ..... classify__C=0.1, reduce_dim__k=all, score=0.968980 -   3.8s
[CV] .... classify__C=0.1, reduce_dim__k=3000, score=0.969948 -   3.3s
[CV] classify__C=0.1, reduce_dim__k=5000 .............................
[CV] ..... classify__C=0.1, reduce_dim__k=all, score=0.968677 -   3.9s
[CV] classify__C=0.1, reduce_dim__k=5000 .............................
[CV] classify__C=0.1, reduce_dim__k=6000 .............................
[CV] classify__C=0.1, reduce_dim__k=6000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=3000, score=0.960069 -   2.5s
[CV] classify__C=0.1, reduce_dim__k=6000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=3000, score=0.965388 -   2.7s
[CV] .... classify__C=0.1, reduce_dim__k=3000, score=0.963810 -   2.6s
[CV] classify__C=0.1, reduce_dim__k=6000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=4000, score=0.968540 -   2.6s
[CV] classify__C=0.1, reduce_dim__k=6000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=3000, score=0.969602 -   2.7s
[CV] classify__C=0.1, reduce_dim__k=10000 ............................
[CV] classify__C=0.1, reduce_dim__k=10000 ............................
[CV] .... classify__C=0.1, reduce_dim__k=4000, score=0.966473 -   2.7s
[CV] classify__C=0.1, reduce_dim__k=10000 ............................
[CV] .... classify__C=0.1, reduce_dim__k=4000, score=0.960852 -   2.8s
[CV] classify__C=0.1, reduce_dim__k=10000 ............................
[CV] .... classify__C=0.1, reduce_dim__k=4000, score=0.964291 -   2.9s
[CV] classify__C=0.1, reduce_dim__k=10000 ............................
[CV] .... classify__C=0.1, reduce_dim__k=5000, score=0.966797 -   2.7s
[CV] classify__C=1, reduce_dim__k=all ................................
[CV] .... classify__C=0.1, reduce_dim__k=5000, score=0.968853 -   2.9s
[CV] .... classify__C=0.1, reduce_dim__k=4000, score=0.972109 -   3.0s
[CV] classify__C=1, reduce_dim__k=all ................................
[CV] classify__C=1, reduce_dim__k=all ................................
[CV] .... classify__C=0.1, reduce_dim__k=5000, score=0.961948 -   3.1s
[CV] classify__C=1, reduce_dim__k=all ................................
[CV] .... classify__C=0.1, reduce_dim__k=6000, score=0.962888 -   3.1s
[CV] .... classify__C=0.1, reduce_dim__k=6000, score=0.969635 -   3.2s
[CV] .... classify__C=0.1, reduce_dim__k=5000, score=0.973519 -   3.2s
[CV] .... classify__C=0.1, reduce_dim__k=5000, score=0.967727 -   3.3s
[CV] classify__C=1, reduce_dim__k=all ................................
[CV] classify__C=1, reduce_dim__k=1000 ...............................
[CV] classify__C=1, reduce_dim__k=1000 ...............................
[CV] classify__C=1, reduce_dim__k=1000 ...............................
[CV] .... classify__C=0.1, reduce_dim__k=6000, score=0.966327 -   2.9s
[CV] classify__C=1, reduce_dim__k=1000 ...............................
[CV] .... classify__C=0.1, reduce_dim__k=6000, score=0.967727 -   2.9s
[CV] classify__C=1, reduce_dim__k=1000 ...............................
[CV] .... classify__C=0.1, reduce_dim__k=6000, score=0.972893 -   3.0s
[CV] classify__C=1, reduce_dim__k=2000 ...............................
[CV] ... classify__C=0.1, reduce_dim__k=10000, score=0.964297 -   3.1s
[CV] classify__C=1, reduce_dim__k=2000 ...............................
[CV] ... classify__C=0.1, reduce_dim__k=10000, score=0.970418 -   3.2s
[CV] ... classify__C=0.1, reduce_dim__k=10000, score=0.968980 -   3.0s
[CV] ... classify__C=0.1, reduce_dim__k=10000, score=0.969460 -   3.1s
[CV] classify__C=1, reduce_dim__k=2000 ...............................
[CV] classify__C=1, reduce_dim__k=2000 ...............................
[CV] classify__C=1, reduce_dim__k=2000 ...............................
[CV] ... classify__C=0.1, reduce_dim__k=10000, score=0.973519 -   3.0s
[CV] classify__C=1, reduce_dim__k=3000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=1000, score=0.953492 -   6.4s
[CV] classify__C=1, reduce_dim__k=3000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=1000, score=0.962412 -   6.4s
[CV] ...... classify__C=1, reduce_dim__k=1000, score=0.962592 -   6.5s
[CV] classify__C=1, reduce_dim__k=3000 ...............................
[CV] classify__C=1, reduce_dim__k=3000 ...............................
[CV] ....... classify__C=1, reduce_dim__k=all, score=0.967444 -   7.7s
[CV] classify__C=1, reduce_dim__k=3000 ...............................
[CV] ....... classify__C=1, reduce_dim__k=all, score=0.966797 -   7.6s
[CV] classify__C=1, reduce_dim__k=4000 ...............................
[CV] ....... classify__C=1, reduce_dim__k=all, score=0.963671 -   7.7s
[CV] classify__C=1, reduce_dim__k=4000 ...............................
[CV] ....... classify__C=1, reduce_dim__k=all, score=0.966160 -   7.6s
[CV] classify__C=1, reduce_dim__k=4000 ...............................
[CV] ....... classify__C=1, reduce_dim__k=all, score=0.972109 -   7.5s
[CV] ...... classify__C=1, reduce_dim__k=1000, score=0.958640 -   6.3s
[CV] classify__C=1, reduce_dim__k=4000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=2000, score=0.958033 -   5.8s
[CV] classify__C=1, reduce_dim__k=4000 ...............................
[CV] classify__C=1, reduce_dim__k=5000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=2000, score=0.966974 -   6.1s
[CV] classify__C=1, reduce_dim__k=5000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=1000, score=0.963021 -   6.3s
[CV] ...... classify__C=1, reduce_dim__k=2000, score=0.964605 -   5.9s
[CV] classify__C=1, reduce_dim__k=5000 ...............................
[CV] classify__C=1, reduce_dim__k=5000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=2000, score=0.960990 -   5.9s
[CV] ...... classify__C=1, reduce_dim__k=2000, score=0.969445 -   6.0s
[CV] classify__C=1, reduce_dim__k=5000 ...............................
[CV] classify__C=1, reduce_dim__k=6000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=3000, score=0.969792 -   6.0s
[CV] classify__C=1, reduce_dim__k=6000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=3000, score=0.961165 -   5.8s
[CV] ...... classify__C=1, reduce_dim__k=3000, score=0.963653 -   5.7s
[CV] classify__C=1, reduce_dim__k=6000 ...............................
[CV] classify__C=1, reduce_dim__k=6000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=3000, score=0.968050 -   5.8s
[CV] classify__C=1, reduce_dim__k=6000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=3000, score=0.970385 -   6.0s
[CV] ...... classify__C=1, reduce_dim__k=4000, score=0.962574 -   5.9s
[CV] classify__C=1, reduce_dim__k=10000 ..............................
[CV] classify__C=1, reduce_dim__k=10000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=4000, score=0.963967 -   6.1s
[CV] ...... classify__C=1, reduce_dim__k=4000, score=0.970856 -   6.1s
[CV] classify__C=1, reduce_dim__k=10000 ..............................
[CV] classify__C=1, reduce_dim__k=10000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=5000, score=0.964140 -   6.1s
[CV] ...... classify__C=1, reduce_dim__k=5000, score=0.967444 -   6.2s
[CV] classify__C=1, reduce_dim__k=10000 ..............................
[CV] classify__C=10, reduce_dim__k=all ...............................
[CV] ...... classify__C=1, reduce_dim__k=4000, score=0.966797 -   6.6s
[CV] ...... classify__C=1, reduce_dim__k=5000, score=0.966641 -   6.2s
[CV] classify__C=10, reduce_dim__k=all ...............................
[CV] ...... classify__C=1, reduce_dim__k=5000, score=0.966317 -   6.2s
[CV] classify__C=10, reduce_dim__k=all ...............................
[CV] classify__C=10, reduce_dim__k=all ...............................
[CV] ...... classify__C=1, reduce_dim__k=4000, score=0.968383 -   7.0s
[CV] classify__C=10, reduce_dim__k=all ...............................
[CV] ...... classify__C=1, reduce_dim__k=5000, score=0.971796 -   6.3s
[CV] classify__C=10, reduce_dim__k=1000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=6000, score=0.967914 -   6.3s
[CV] ...... classify__C=1, reduce_dim__k=6000, score=0.964140 -   6.3s
[CV] classify__C=10, reduce_dim__k=1000 ..............................
[CV] classify__C=10, reduce_dim__k=1000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=6000, score=0.967737 -   6.1s
[CV] classify__C=10, reduce_dim__k=1000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=6000, score=0.966473 -   6.5s
[CV] classify__C=10, reduce_dim__k=1000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=6000, score=0.972266 -   6.6s
[CV] classify__C=10, reduce_dim__k=2000 ..............................
[CV] ..... classify__C=1, reduce_dim__k=10000, score=0.963984 -   6.7s
[CV] ..... classify__C=1, reduce_dim__k=10000, score=0.967288 -   6.8s
[CV] classify__C=10, reduce_dim__k=2000 ..............................
[CV] classify__C=10, reduce_dim__k=2000 ..............................
[CV] ..... classify__C=1, reduce_dim__k=10000, score=0.967424 -   7.1s
[CV] classify__C=10, reduce_dim__k=2000 ..............................
[CV] ..... classify__C=1, reduce_dim__k=10000, score=0.972422 -   7.4s
[CV] classify__C=10, reduce_dim__k=2000 ..............................
[CV] ..... classify__C=1, reduce_dim__k=10000, score=0.966160 -   7.9s
[CV] classify__C=10, reduce_dim__k=3000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=1000, score=0.953492 -   8.2s
[CV] ...... classify__C=10, reduce_dim__k=all, score=0.963183 -   8.4s
[Parallel(n_jobs=16)]: Done  82 tasks      | elapsed:   29.8s
[CV] classify__C=10, reduce_dim__k=3000 ..............................
[CV] classify__C=10, reduce_dim__k=3000 ..............................
[CV] ...... classify__C=10, reduce_dim__k=all, score=0.964297 -   8.6s
[CV] ...... classify__C=10, reduce_dim__k=all, score=0.965096 -   8.7s
[CV] classify__C=10, reduce_dim__k=3000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=1000, score=0.960401 -   8.4s
[CV] ...... classify__C=10, reduce_dim__k=all, score=0.970072 -   8.5s
[CV] classify__C=10, reduce_dim__k=3000 ..............................
[CV] classify__C=10, reduce_dim__k=4000 ..............................
[CV] classify__C=10, reduce_dim__k=4000 ..............................
[CV] ...... classify__C=10, reduce_dim__k=all, score=0.964135 -   8.8s
[CV] classify__C=10, reduce_dim__k=4000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=1000, score=0.960689 -   8.6s
[CV] classify__C=10, reduce_dim__k=4000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=2000, score=0.963688 -   6.0s
[CV] classify__C=10, reduce_dim__k=4000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=2000, score=0.953805 -   5.6s
[CV] classify__C=10, reduce_dim__k=5000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=1000, score=0.955037 -   7.8s
[CV] classify__C=10, reduce_dim__k=5000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=2000, score=0.961785 -   6.8s
[CV] classify__C=10, reduce_dim__k=5000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=2000, score=0.957230 -   6.1s
[CV] classify__C=10, reduce_dim__k=5000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=1000, score=0.960514 -   8.2s
[CV] classify__C=10, reduce_dim__k=5000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=3000, score=0.965253 -   5.5s
[CV] classify__C=10, reduce_dim__k=6000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=2000, score=0.966312 -   6.1s
[CV] classify__C=10, reduce_dim__k=6000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=3000, score=0.958033 -   5.7s
[CV] ..... classify__C=10, reduce_dim__k=3000, score=0.958953 -   5.6s
[CV] ..... classify__C=10, reduce_dim__k=3000, score=0.963665 -   5.7s
[CV] classify__C=10, reduce_dim__k=6000 ..............................
[CV] classify__C=10, reduce_dim__k=6000 ..............................
[CV] classify__C=10, reduce_dim__k=6000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=3000, score=0.966155 -   5.9s
[CV] classify__C=10, reduce_dim__k=10000 .............................
[CV] ..... classify__C=10, reduce_dim__k=4000, score=0.964783 -   6.3s
[CV] classify__C=10, reduce_dim__k=10000 .............................
[CV] ..... classify__C=10, reduce_dim__k=4000, score=0.962725 -   6.3s
[CV] classify__C=10, reduce_dim__k=10000 .............................
[CV] ..... classify__C=10, reduce_dim__k=4000, score=0.961617 -   6.5s
[CV] classify__C=10, reduce_dim__k=10000 .............................
[CV] ..... classify__C=10, reduce_dim__k=4000, score=0.960382 -   7.0s
[CV] classify__C=10, reduce_dim__k=10000 .............................
[CV] ..... classify__C=10, reduce_dim__k=4000, score=0.967095 -   5.8s
[CV] ..... classify__C=10, reduce_dim__k=5000, score=0.962592 -   6.3s
[CV] ..... classify__C=10, reduce_dim__k=5000, score=0.962731 -   6.4s
[CV] ..... classify__C=10, reduce_dim__k=5000, score=0.967565 -   6.3s
[CV] ..... classify__C=10, reduce_dim__k=5000, score=0.964605 -   6.8s
[CV] ..... classify__C=10, reduce_dim__k=5000, score=0.963340 -   6.6s
[CV] ..... classify__C=10, reduce_dim__k=6000, score=0.964001 -   6.7s
[CV] ..... classify__C=10, reduce_dim__k=6000, score=0.962731 -   6.8s
[CV] ..... classify__C=10, reduce_dim__k=6000, score=0.967565 -   6.1s
[CV] ..... classify__C=10, reduce_dim__k=6000, score=0.964761 -   6.3s
[CV] ..... classify__C=10, reduce_dim__k=6000, score=0.963027 -   6.7s
[CV] .... classify__C=10, reduce_dim__k=10000, score=0.964470 -   6.7s
[CV] .... classify__C=10, reduce_dim__k=10000, score=0.962418 -   6.7s
[CV] .... classify__C=10, reduce_dim__k=10000, score=0.964918 -   6.7s
[CV] .... classify__C=10, reduce_dim__k=10000, score=0.962870 -   7.0s
[CV] .... classify__C=10, reduce_dim__k=10000, score=0.969445 -   6.9s
[Parallel(n_jobs=16)]: Done 120 out of 120 | elapsed:   44.0s finished

Best parameters found on training set for verb tam classification: 

{'classify__C': 0.1, 'reduce_dim__k': 'all'}
{'SUB-PREF=SG2', 'SUB-PREF=2-PL2', 'SUB-PREF=8-PL', 'SUB-PREF=6-PLSG', 'SUB-PREF=1-SG2', 'SUB-PREF=2-PL1', 'SUB-PREF=2-PL3', 'SUB-PREF=5-SG', 'SUB-PREF=PL2', 'SUB-PREF=2-PL', 'SUB-PREF=1-SG3', 'SUB-PREF=HABIT-PL', 'SUB-PREF=SG3', 'SUB-PREF=1-SG1', 'SUB-PREF=9-SG', 'SUB-PREF=16-SG', 'SUB-PREF=10-PL', 'SUB-PREF=17-SG', 'SUB-PREF=15-SG', 'SUB-PREF=3-SG', 'SUB-PREF=4-PL', 'SUB-PREF=HABIT-SG', '-', 'SUB-PREF=11-SG', 'SUB-PREF=1-SG', 'SUB-PREF=PL1', 'SUB-PREF=6-PL', 'SUB-PREF=18-SG', 'SUB-PREF=SG1', 'SUB-PREF=7-SG'}
/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/cross_validation.py:553: Warning: The least populated class in y has only 1 members, which is too few. The minimum number of labels for any class cannot be less than n_folds=5.
  % (min_labels, self.n_folds)), Warning)
Fitting 5 folds for each of 24 candidates, totalling 120 fits
[CV] classify__C=0.1, reduce_dim__k=all ..............................
[CV] classify__C=0.1, reduce_dim__k=all ..............................
[CV] classify__C=0.1, reduce_dim__k=all ..............................
[CV] classify__C=0.1, reduce_dim__k=all ..............................
[CV] classify__C=0.1, reduce_dim__k=all ..............................
[CV] classify__C=0.1, reduce_dim__k=1000 .............................
[CV] classify__C=0.1, reduce_dim__k=1000 .............................
[CV] classify__C=0.1, reduce_dim__k=1000 .............................
[CV] classify__C=0.1, reduce_dim__k=1000 .............................
[CV] classify__C=0.1, reduce_dim__k=1000 .............................
[CV] classify__C=0.1, reduce_dim__k=2000 .............................
[CV] classify__C=0.1, reduce_dim__k=2000 .............................
[CV] classify__C=0.1, reduce_dim__k=2000 .............................
[CV] classify__C=0.1, reduce_dim__k=2000 .............................
[CV] classify__C=0.1, reduce_dim__k=2000 .............................
[CV] classify__C=0.1, reduce_dim__k=3000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=1000, score=0.937012 -   4.0s
[CV] classify__C=0.1, reduce_dim__k=3000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=1000, score=0.934742 -   4.2s
[CV] classify__C=0.1, reduce_dim__k=3000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=1000, score=0.937216 -   4.5s
[CV] .... classify__C=0.1, reduce_dim__k=2000, score=0.935055 -   4.4s
[CV] classify__C=0.1, reduce_dim__k=3000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=2000, score=0.939252 -   4.4s
[CV] classify__C=0.1, reduce_dim__k=3000 .............................
[CV] classify__C=0.1, reduce_dim__k=4000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=1000, score=0.937049 -   4.8s
[CV] .... classify__C=0.1, reduce_dim__k=2000, score=0.942006 -   4.7s
[CV] ..... classify__C=0.1, reduce_dim__k=all, score=0.945295 -   5.2s
[CV] classify__C=0.1, reduce_dim__k=4000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=1000, score=0.939655 -   4.9s
[Parallel(n_jobs=16)]: Done   9 tasks      | elapsed:    5.3s
[CV] classify__C=0.1, reduce_dim__k=4000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=2000, score=0.942482 -   4.9s
[CV] classify__C=0.1, reduce_dim__k=4000 .............................
[CV] classify__C=0.1, reduce_dim__k=4000 .............................
[CV] classify__C=0.1, reduce_dim__k=5000 .............................
[CV] ..... classify__C=0.1, reduce_dim__k=all, score=0.940532 -   5.6s
[CV] classify__C=0.1, reduce_dim__k=5000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=2000, score=0.938932 -   5.2s
[CV] classify__C=0.1, reduce_dim__k=5000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=3000, score=0.944670 -   5.2s
[CV] classify__C=0.1, reduce_dim__k=5000 .............................
[CV] ..... classify__C=0.1, reduce_dim__k=all, score=0.942853 -   6.1s
[CV] classify__C=0.1, reduce_dim__k=5000 .............................
[CV] ..... classify__C=0.1, reduce_dim__k=all, score=0.943730 -   6.2s
[CV] classify__C=0.1, reduce_dim__k=6000 .............................
[CV] ..... classify__C=0.1, reduce_dim__k=all, score=0.944270 -   6.4s
[CV] classify__C=0.1, reduce_dim__k=6000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=3000, score=0.935211 -   4.3s
[CV] classify__C=0.1, reduce_dim__k=6000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=3000, score=0.941130 -   4.3s
[CV] classify__C=0.1, reduce_dim__k=6000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=3000, score=0.940973 -   4.4s
[CV] .... classify__C=0.1, reduce_dim__k=3000, score=0.942947 -   4.5s
[CV] classify__C=0.1, reduce_dim__k=6000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=4000, score=0.944514 -   4.5s
[CV] classify__C=0.1, reduce_dim__k=10000 ............................
[CV] classify__C=0.1, reduce_dim__k=10000 ............................
[CV] .... classify__C=0.1, reduce_dim__k=4000, score=0.943636 -   4.6s
[CV] classify__C=0.1, reduce_dim__k=10000 ............................
[CV] .... classify__C=0.1, reduce_dim__k=4000, score=0.943730 -   4.6s
[CV] classify__C=0.1, reduce_dim__k=10000 ............................
[CV] .... classify__C=0.1, reduce_dim__k=4000, score=0.937559 -   5.0s
[CV] classify__C=0.1, reduce_dim__k=10000 ............................
[CV] .... classify__C=0.1, reduce_dim__k=5000, score=0.938498 -   4.7s
[CV] .... classify__C=0.1, reduce_dim__k=4000, score=0.942229 -   5.0s
[CV] classify__C=1, reduce_dim__k=all ................................
[CV] classify__C=1, reduce_dim__k=all ................................
[CV] .... classify__C=0.1, reduce_dim__k=5000, score=0.943732 -   5.3s
[CV] classify__C=1, reduce_dim__k=all ................................
[CV] .... classify__C=0.1, reduce_dim__k=5000, score=0.944575 -   5.3s
[CV] classify__C=1, reduce_dim__k=all ................................
[CV] .... classify__C=0.1, reduce_dim__k=5000, score=0.942163 -   5.5s
[CV] classify__C=1, reduce_dim__k=all ................................
[CV] .... classify__C=0.1, reduce_dim__k=5000, score=0.943642 -   5.5s
[CV] classify__C=1, reduce_dim__k=1000 ...............................
[CV] .... classify__C=0.1, reduce_dim__k=6000, score=0.944514 -   5.5s
[CV] classify__C=1, reduce_dim__k=1000 ...............................
[CV] .... classify__C=0.1, reduce_dim__k=6000, score=0.938967 -   5.6s
[CV] classify__C=1, reduce_dim__k=1000 ...............................
[CV] .... classify__C=0.1, reduce_dim__k=6000, score=0.942790 -   4.5s
[CV] classify__C=1, reduce_dim__k=1000 ...............................
[CV] .... classify__C=0.1, reduce_dim__k=6000, score=0.945045 -   5.2s
[CV] classify__C=1, reduce_dim__k=1000 ...............................
[CV] .... classify__C=0.1, reduce_dim__k=6000, score=0.944898 -   4.7s
[CV] classify__C=1, reduce_dim__k=2000 ...............................
[CV] ... classify__C=0.1, reduce_dim__k=10000, score=0.944983 -   4.9s
[CV] classify__C=1, reduce_dim__k=2000 ...............................
[CV] ... classify__C=0.1, reduce_dim__k=10000, score=0.940376 -   5.0s
[CV] classify__C=1, reduce_dim__k=2000 ...............................
[CV] ... classify__C=0.1, reduce_dim__k=10000, score=0.943479 -   4.9s
[CV] classify__C=1, reduce_dim__k=2000 ...............................
[CV] ... classify__C=0.1, reduce_dim__k=10000, score=0.943417 -   4.9s
[CV] classify__C=1, reduce_dim__k=2000 ...............................
[CV] ... classify__C=0.1, reduce_dim__k=10000, score=0.944113 -   5.8s
[CV] classify__C=1, reduce_dim__k=3000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=1000, score=0.934272 -   9.7s
[CV] classify__C=1, reduce_dim__k=3000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=1000, score=0.938625 -   9.6s
[CV] classify__C=1, reduce_dim__k=3000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=1000, score=0.938871 -   8.5s
[CV] classify__C=1, reduce_dim__k=3000 ...............................
[CV] ....... classify__C=1, reduce_dim__k=all, score=0.941075 -  12.0s
[CV] classify__C=1, reduce_dim__k=3000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=2000, score=0.935368 -   8.2s
[CV] classify__C=1, reduce_dim__k=4000 ...............................
[CV] ....... classify__C=1, reduce_dim__k=all, score=0.937872 -  12.2s
[CV] ...... classify__C=1, reduce_dim__k=2000, score=0.941232 -   8.6s
[CV] classify__C=1, reduce_dim__k=4000 ...............................
[CV] classify__C=1, reduce_dim__k=4000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=1000, score=0.935761 -  11.1s
[CV] classify__C=1, reduce_dim__k=4000 ...............................
[CV] ....... classify__C=1, reduce_dim__k=all, score=0.940504 -  12.6s
[CV] classify__C=1, reduce_dim__k=4000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=1000, score=0.937049 -   9.7s
[CV] classify__C=1, reduce_dim__k=5000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=2000, score=0.941066 -   8.8s
[CV] ....... classify__C=1, reduce_dim__k=all, score=0.941693 -  12.6s
[CV] classify__C=1, reduce_dim__k=5000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=2000, score=0.938148 -   8.8s
[CV] classify__C=1, reduce_dim__k=5000 ...............................
[CV] classify__C=1, reduce_dim__k=5000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=2000, score=0.941757 -   9.4s
[CV] classify__C=1, reduce_dim__k=5000 ...............................
[CV] ....... classify__C=1, reduce_dim__k=all, score=0.941444 -  12.8s
[CV] classify__C=1, reduce_dim__k=6000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=3000, score=0.942326 -   9.0s
[CV] classify__C=1, reduce_dim__k=6000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=3000, score=0.936933 -   8.8s
[CV] classify__C=1, reduce_dim__k=6000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=3000, score=0.942070 -   8.7s
[CV] classify__C=1, reduce_dim__k=6000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=3000, score=0.940282 -   8.8s
[CV] classify__C=1, reduce_dim__k=6000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=3000, score=0.942229 -   8.6s
[CV] classify__C=1, reduce_dim__k=10000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=4000, score=0.943264 -   8.6s
[CV] classify__C=1, reduce_dim__k=10000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=4000, score=0.941757 -   8.8s
[CV] classify__C=1, reduce_dim__k=10000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=4000, score=0.935994 -   9.1s
[CV] classify__C=1, reduce_dim__k=10000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=4000, score=0.939812 -   9.2s
[CV] classify__C=1, reduce_dim__k=10000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=4000, score=0.942229 -   9.4s
[CV] classify__C=10, reduce_dim__k=all ...............................
[CV] ...... classify__C=1, reduce_dim__k=5000, score=0.941075 -   9.8s
[CV] classify__C=10, reduce_dim__k=all ...............................
[CV] ...... classify__C=1, reduce_dim__k=5000, score=0.935368 -   9.7s
[CV] classify__C=10, reduce_dim__k=all ...............................
[CV] ...... classify__C=1, reduce_dim__k=5000, score=0.938558 -   9.8s
[CV] classify__C=10, reduce_dim__k=all ...............................
[CV] ...... classify__C=1, reduce_dim__k=5000, score=0.942070 -  10.0s
[CV] classify__C=10, reduce_dim__k=all ...............................
[CV] ...... classify__C=1, reduce_dim__k=5000, score=0.941915 -  10.1s
[CV] classify__C=10, reduce_dim__k=1000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=6000, score=0.940138 -  10.3s
[CV] classify__C=10, reduce_dim__k=1000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=6000, score=0.936463 -   9.9s
[CV] classify__C=10, reduce_dim__k=1000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=6000, score=0.940909 -  10.5s
[CV] classify__C=10, reduce_dim__k=1000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=6000, score=0.943171 -  10.2s
[CV] classify__C=10, reduce_dim__k=1000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=6000, score=0.941600 -  10.8s
[CV] classify__C=10, reduce_dim__k=2000 ..............................
[CV] ..... classify__C=1, reduce_dim__k=10000, score=0.937559 -  10.8s
[CV] classify__C=10, reduce_dim__k=2000 ..............................
[CV] ..... classify__C=1, reduce_dim__k=10000, score=0.941388 -  11.3s
[CV] classify__C=10, reduce_dim__k=2000 ..............................
[CV] ..... classify__C=1, reduce_dim__k=10000, score=0.940661 -  11.5s
[CV] classify__C=10, reduce_dim__k=2000 ..............................
[CV] ..... classify__C=1, reduce_dim__k=10000, score=0.941066 -  11.7s
[CV] classify__C=10, reduce_dim__k=2000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=1000, score=0.933886 -  10.0s
[CV] classify__C=10, reduce_dim__k=3000 ..............................
[CV] ..... classify__C=1, reduce_dim__k=10000, score=0.941601 -  12.5s
[CV] classify__C=10, reduce_dim__k=3000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=1000, score=0.931925 -  10.3s
[Parallel(n_jobs=16)]: Done  82 tasks      | elapsed:   45.0s
[CV] classify__C=10, reduce_dim__k=3000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=1000, score=0.936433 -   9.8s
[CV] classify__C=10, reduce_dim__k=3000 ..............................
[CV] ...... classify__C=10, reduce_dim__k=all, score=0.938575 -  13.0s
[CV] classify__C=10, reduce_dim__k=3000 ..............................
[CV] ...... classify__C=10, reduce_dim__k=all, score=0.940909 -  13.0s
[CV] classify__C=10, reduce_dim__k=4000 ..............................
[CV] ...... classify__C=10, reduce_dim__k=all, score=0.937373 -  13.3s
[CV] classify__C=10, reduce_dim__k=4000 ..............................
[CV] ...... classify__C=10, reduce_dim__k=all, score=0.935837 -  13.5s
[CV] classify__C=10, reduce_dim__k=4000 ..............................
[CV] ...... classify__C=10, reduce_dim__k=all, score=0.940031 -  15.5s
[CV] classify__C=10, reduce_dim__k=4000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=2000, score=0.936543 -   9.0s
[CV] classify__C=10, reduce_dim__k=4000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=1000, score=0.933438 -   9.6s
[CV] classify__C=10, reduce_dim__k=5000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=2000, score=0.932238 -   8.8s
[CV] classify__C=10, reduce_dim__k=5000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=2000, score=0.935337 -   8.6s
[CV] ..... classify__C=10, reduce_dim__k=1000, score=0.935266 -  10.0s
[CV] classify__C=10, reduce_dim__k=5000 ..............................
[CV] classify__C=10, reduce_dim__k=5000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=3000, score=0.938887 -   8.7s
[CV] classify__C=10, reduce_dim__k=5000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=2000, score=0.933281 -   9.4s
[CV] classify__C=10, reduce_dim__k=6000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=2000, score=0.935580 -  10.6s
[CV] classify__C=10, reduce_dim__k=6000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=3000, score=0.931299 -   9.1s
[CV] classify__C=10, reduce_dim__k=6000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=3000, score=0.934953 -   9.2s
[CV] classify__C=10, reduce_dim__k=6000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=3000, score=0.934085 -   9.4s
[CV] classify__C=10, reduce_dim__k=6000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=3000, score=0.936892 -   9.3s
[CV] classify__C=10, reduce_dim__k=10000 .............................
[CV] ..... classify__C=10, reduce_dim__k=4000, score=0.932081 -   9.5s
[CV] ..... classify__C=10, reduce_dim__k=4000, score=0.938575 -   9.6s
[CV] classify__C=10, reduce_dim__k=10000 .............................
[CV] classify__C=10, reduce_dim__k=10000 .............................
[CV] ..... classify__C=10, reduce_dim__k=4000, score=0.936590 -   9.6s
[CV] classify__C=10, reduce_dim__k=10000 .............................
[CV] ..... classify__C=10, reduce_dim__k=4000, score=0.936520 -  10.0s
[CV] classify__C=10, reduce_dim__k=10000 .............................
[CV] ..... classify__C=10, reduce_dim__k=5000, score=0.935605 -   9.6s
[CV] ..... classify__C=10, reduce_dim__k=4000, score=0.940188 -  10.4s
[CV] ..... classify__C=10, reduce_dim__k=5000, score=0.934116 -  10.3s
[CV] ..... classify__C=10, reduce_dim__k=5000, score=0.937216 -  10.3s
[CV] ..... classify__C=10, reduce_dim__k=5000, score=0.937304 -  10.9s
[CV] ..... classify__C=10, reduce_dim__k=6000, score=0.936855 -  10.1s
[CV] ..... classify__C=10, reduce_dim__k=5000, score=0.938776 -  10.4s
[CV] ..... classify__C=10, reduce_dim__k=6000, score=0.937373 -  10.4s
[CV] ..... classify__C=10, reduce_dim__k=6000, score=0.933177 -  10.5s
[CV] ..... classify__C=10, reduce_dim__k=6000, score=0.940659 -  10.5s
[CV] ..... classify__C=10, reduce_dim__k=6000, score=0.938245 -  10.9s
[CV] .... classify__C=10, reduce_dim__k=10000, score=0.938887 -  11.0s
[CV] .... classify__C=10, reduce_dim__k=10000, score=0.937715 -  10.8s
[CV] .... classify__C=10, reduce_dim__k=10000, score=0.941223 -  11.4s
[CV] .... classify__C=10, reduce_dim__k=10000, score=0.938469 -  11.9s
[CV] .... classify__C=10, reduce_dim__k=10000, score=0.940345 -  10.2s
[Parallel(n_jobs=16)]: Done 120 out of 120 | elapsed:  1.2min finished

Best parameters found on training set for verb subj classification: 

{'classify__C': 0.1, 'reduce_dim__k': 'all'}
{'OBJ-PREF=1-SG3', 'OBJ-PREF=5-SG', 'OBJ-PREF=11-SG', 'OBJ-PREF=10-PL', 'OBJ-PREF=8-PL', '-', 'OBJ-PREF=6-PL', 'OBJ-PREF=2-PL3', 'OBJ-PREF=1-SG2', 'OBJ-PREF=2-PL1', 'OBJ-PREF=9-SG', 'OBJ-PREF=7-SG', 'OBJ-PREF=PL-REFL', 'OBJ-PREF=4-PL', 'OBJ-PREF=16-SG', 'OBJ-PREF=15-SG', 'OBJ-PREF=2-PL2', 'OBJ-PREF=SG-REFL', 'OBJ-PREF=3-SG', 'OBJ-PREF=1-SG1'}
Fitting 5 folds for each of 24 candidates, totalling 120 fits
[CV] classify__C=0.1, reduce_dim__k=all ..............................
[CV] classify__C=0.1, reduce_dim__k=all ..............................
[CV] classify__C=0.1, reduce_dim__k=all ..............................
[CV] classify__C=0.1, reduce_dim__k=all ..............................
[CV] classify__C=0.1, reduce_dim__k=all ..............................
[CV] classify__C=0.1, reduce_dim__k=1000 .............................
[CV] classify__C=0.1, reduce_dim__k=1000 .............................
[CV] classify__C=0.1, reduce_dim__k=1000 .............................
[CV] classify__C=0.1, reduce_dim__k=1000 .............................
[CV] classify__C=0.1, reduce_dim__k=1000 .............................
[CV] classify__C=0.1, reduce_dim__k=2000 .............................
[CV] classify__C=0.1, reduce_dim__k=2000 .............................
[CV] classify__C=0.1, reduce_dim__k=2000 .............................
[CV] classify__C=0.1, reduce_dim__k=2000 .............................
[CV] classify__C=0.1, reduce_dim__k=2000 .............................
[CV] classify__C=0.1, reduce_dim__k=3000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=1000, score=0.959624 -   2.4s
[CV] classify__C=0.1, reduce_dim__k=3000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=1000, score=0.956678 -   2.5s
[CV] .... classify__C=0.1, reduce_dim__k=1000, score=0.957994 -   2.4s
[CV] classify__C=0.1, reduce_dim__k=3000 .............................
[CV] classify__C=0.1, reduce_dim__k=3000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=1000, score=0.956617 -   2.5s
[CV] classify__C=0.1, reduce_dim__k=3000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=1000, score=0.961261 -   2.5s
[CV] classify__C=0.1, reduce_dim__k=4000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=2000, score=0.967293 -   2.7s
[CV] .... classify__C=0.1, reduce_dim__k=2000, score=0.962778 -   2.7s
[CV] .... classify__C=0.1, reduce_dim__k=2000, score=0.964448 -   2.7s
[CV] classify__C=0.1, reduce_dim__k=4000 .............................
[CV] classify__C=0.1, reduce_dim__k=4000 .............................
[CV] classify__C=0.1, reduce_dim__k=4000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=2000, score=0.965652 -   2.7s
[Parallel(n_jobs=16)]: Done   9 tasks      | elapsed:    3.3s
[CV] .... classify__C=0.1, reduce_dim__k=3000, score=0.970285 -   2.7s
[CV] classify__C=0.1, reduce_dim__k=4000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=2000, score=0.966614 -   2.8s
[CV] classify__C=0.1, reduce_dim__k=5000 .............................
[CV] ..... classify__C=0.1, reduce_dim__k=all, score=0.977792 -   3.4s
[CV] classify__C=0.1, reduce_dim__k=5000 .............................
[CV] classify__C=0.1, reduce_dim__k=5000 .............................
[CV] ..... classify__C=0.1, reduce_dim__k=all, score=0.979656 -   3.5s
[CV] ..... classify__C=0.1, reduce_dim__k=all, score=0.977900 -   3.5s
[CV] classify__C=0.1, reduce_dim__k=5000 .............................
[CV] ..... classify__C=0.1, reduce_dim__k=all, score=0.976821 -   3.5s
[CV] classify__C=0.1, reduce_dim__k=5000 .............................
[CV] classify__C=0.1, reduce_dim__k=6000 .............................
[CV] ..... classify__C=0.1, reduce_dim__k=all, score=0.979141 -   3.7s
[CV] classify__C=0.1, reduce_dim__k=6000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=3000, score=0.972300 -   2.8s
[CV] .... classify__C=0.1, reduce_dim__k=3000, score=0.971003 -   2.8s
[CV] classify__C=0.1, reduce_dim__k=6000 .............................
[CV] classify__C=0.1, reduce_dim__k=6000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=3000, score=0.970399 -   2.9s
[CV] classify__C=0.1, reduce_dim__k=6000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=3000, score=0.971299 -   2.9s
[CV] classify__C=0.1, reduce_dim__k=10000 ............................
[CV] .... classify__C=0.1, reduce_dim__k=4000, score=0.973725 -   3.2s
[CV] classify__C=0.1, reduce_dim__k=10000 ............................
[CV] .... classify__C=0.1, reduce_dim__k=4000, score=0.975063 -   2.8s
[CV] .... classify__C=0.1, reduce_dim__k=4000, score=0.974335 -   3.0s
[CV] classify__C=0.1, reduce_dim__k=10000 ............................
[CV] classify__C=0.1, reduce_dim__k=10000 ............................
[CV] .... classify__C=0.1, reduce_dim__k=5000, score=0.974002 -   3.0s
[CV] .... classify__C=0.1, reduce_dim__k=4000, score=0.975078 -   3.2s
[CV] classify__C=0.1, reduce_dim__k=10000 ............................
[CV] classify__C=1, reduce_dim__k=all ................................
[CV] .... classify__C=0.1, reduce_dim__k=4000, score=0.972592 -   3.3s
[CV] classify__C=1, reduce_dim__k=all ................................
[CV] .... classify__C=0.1, reduce_dim__k=5000, score=0.976646 -   3.0s
[CV] classify__C=1, reduce_dim__k=all ................................
[CV] .... classify__C=0.1, reduce_dim__k=5000, score=0.975759 -   3.4s
[CV] classify__C=1, reduce_dim__k=all ................................
[CV] .... classify__C=0.1, reduce_dim__k=6000, score=0.977479 -   3.2s
[CV] classify__C=1, reduce_dim__k=all ................................
[CV] .... classify__C=0.1, reduce_dim__k=5000, score=0.975743 -   3.6s
[CV] classify__C=1, reduce_dim__k=1000 ...............................
[CV] .... classify__C=0.1, reduce_dim__k=5000, score=0.975533 -   3.5s
[CV] classify__C=1, reduce_dim__k=1000 ...............................
[CV] .... classify__C=0.1, reduce_dim__k=6000, score=0.977465 -   3.3s
[CV] classify__C=1, reduce_dim__k=1000 ...............................
[CV] .... classify__C=0.1, reduce_dim__k=6000, score=0.976019 -   3.0s
[CV] classify__C=1, reduce_dim__k=1000 ...............................
[CV] .... classify__C=0.1, reduce_dim__k=6000, score=0.974628 -   3.5s
[CV] classify__C=1, reduce_dim__k=1000 ...............................
[CV] .... classify__C=0.1, reduce_dim__k=6000, score=0.977102 -   3.6s
[CV] classify__C=1, reduce_dim__k=2000 ...............................
[CV] ... classify__C=0.1, reduce_dim__k=10000, score=0.976194 -   3.3s
[CV] classify__C=1, reduce_dim__k=2000 ...............................
[CV] ... classify__C=0.1, reduce_dim__k=10000, score=0.977948 -   3.9s
[CV] classify__C=1, reduce_dim__k=2000 ...............................
[CV] ... classify__C=0.1, reduce_dim__k=10000, score=0.977729 -   3.2s
[CV] classify__C=1, reduce_dim__k=2000 ...............................
[CV] ... classify__C=0.1, reduce_dim__k=10000, score=0.978560 -   3.9s
[CV] classify__C=1, reduce_dim__k=2000 ...............................
[CV] ... classify__C=0.1, reduce_dim__k=10000, score=0.976959 -   3.9s
[CV] classify__C=1, reduce_dim__k=3000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=1000, score=0.962128 -   4.6s
[CV] classify__C=1, reduce_dim__k=3000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=1000, score=0.959493 -   5.0s
[CV] classify__C=1, reduce_dim__k=3000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=1000, score=0.957713 -   5.0s
[CV] classify__C=1, reduce_dim__k=3000 ...............................
[CV] ....... classify__C=1, reduce_dim__k=all, score=0.976317 -   5.8s
[CV] ....... classify__C=1, reduce_dim__k=all, score=0.976038 -   6.1s
[CV] classify__C=1, reduce_dim__k=3000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=1000, score=0.960658 -   4.2s
[CV] classify__C=1, reduce_dim__k=4000 ...............................
[CV] classify__C=1, reduce_dim__k=4000 ...............................
[CV] ....... classify__C=1, reduce_dim__k=all, score=0.977273 -   6.9s
[CV] ....... classify__C=1, reduce_dim__k=all, score=0.974977 -   7.2s
[CV] classify__C=1, reduce_dim__k=4000 ...............................
[CV] classify__C=1, reduce_dim__k=4000 ...............................
[CV] ....... classify__C=1, reduce_dim__k=all, score=0.977621 -   7.3s
[CV] classify__C=1, reduce_dim__k=4000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=2000, score=0.968388 -   4.4s
[CV] classify__C=1, reduce_dim__k=5000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=1000, score=0.962202 -   5.0s
[CV] classify__C=1, reduce_dim__k=5000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=2000, score=0.967782 -   5.0s
[CV] classify__C=1, reduce_dim__k=5000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=2000, score=0.969122 -   4.6s
[CV] classify__C=1, reduce_dim__k=5000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=2000, score=0.966171 -   5.1s
[CV] classify__C=1, reduce_dim__k=5000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=3000, score=0.971223 -   4.7s
[CV] classify__C=1, reduce_dim__k=6000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=2000, score=0.967221 -   5.3s
[CV] classify__C=1, reduce_dim__k=6000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=3000, score=0.972613 -   4.2s
[CV] classify__C=1, reduce_dim__k=6000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=3000, score=0.971496 -   4.3s
[CV] classify__C=1, reduce_dim__k=6000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=3000, score=0.972414 -   4.8s
[CV] classify__C=1, reduce_dim__k=6000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=3000, score=0.972710 -   4.8s
[CV] classify__C=1, reduce_dim__k=10000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=4000, score=0.972474 -   4.9s
[CV] classify__C=1, reduce_dim__k=10000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=4000, score=0.975430 -   5.0s
[CV] classify__C=1, reduce_dim__k=10000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=4000, score=0.973062 -   5.1s
[CV] classify__C=1, reduce_dim__k=10000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=5000, score=0.974351 -   5.1s
[CV] classify__C=1, reduce_dim__k=10000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=4000, score=0.974279 -   5.2s
[CV] classify__C=10, reduce_dim__k=all ...............................
[CV] ...... classify__C=1, reduce_dim__k=4000, score=0.974608 -   5.6s
[CV] classify__C=10, reduce_dim__k=all ...............................
[CV] ...... classify__C=1, reduce_dim__k=5000, score=0.975743 -   5.5s
[CV] classify__C=10, reduce_dim__k=all ...............................
[CV] ...... classify__C=1, reduce_dim__k=5000, score=0.973375 -   5.7s
[CV] ...... classify__C=1, reduce_dim__k=5000, score=0.976019 -   5.6s
[CV] classify__C=10, reduce_dim__k=all ...............................
[CV] classify__C=10, reduce_dim__k=all ...............................
[CV] ...... classify__C=1, reduce_dim__k=5000, score=0.975847 -   5.8s
[CV] classify__C=10, reduce_dim__k=1000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=6000, score=0.974664 -   6.0s
[CV] classify__C=10, reduce_dim__k=1000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=6000, score=0.976056 -   6.3s
[CV] classify__C=10, reduce_dim__k=1000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=6000, score=0.976194 -   5.7s
[CV] classify__C=10, reduce_dim__k=1000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=6000, score=0.975549 -   5.6s
[CV] classify__C=10, reduce_dim__k=1000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=6000, score=0.976945 -   5.3s
[CV] classify__C=10, reduce_dim__k=2000 ..............................
[CV] ..... classify__C=1, reduce_dim__k=10000, score=0.974664 -   6.1s
[CV] classify__C=10, reduce_dim__k=2000 ..............................
[CV] ..... classify__C=1, reduce_dim__k=10000, score=0.977621 -   6.1s
[CV] classify__C=10, reduce_dim__k=2000 ..............................
[CV] ..... classify__C=1, reduce_dim__k=10000, score=0.976038 -   6.5s
[CV] classify__C=10, reduce_dim__k=2000 ..............................
[CV] ...... classify__C=10, reduce_dim__k=all, score=0.973882 -   6.4s
[CV] classify__C=10, reduce_dim__k=2000 ..............................
[CV] ...... classify__C=10, reduce_dim__k=all, score=0.974335 -   6.5s
[CV] classify__C=10, reduce_dim__k=3000 ..............................
[CV] ..... classify__C=1, reduce_dim__k=10000, score=0.977273 -   7.5s
[CV] classify__C=10, reduce_dim__k=3000 ..............................
[CV] ...... classify__C=10, reduce_dim__k=all, score=0.974158 -   6.7s
[Parallel(n_jobs=16)]: Done  82 tasks      | elapsed:   26.5s
[CV] ...... classify__C=10, reduce_dim__k=all, score=0.975862 -   6.4s
[CV] classify__C=10, reduce_dim__k=3000 ..............................
[CV] classify__C=10, reduce_dim__k=3000 ..............................
[CV] ...... classify__C=10, reduce_dim__k=all, score=0.974592 -   6.6s
[CV] classify__C=10, reduce_dim__k=3000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=2000, score=0.964185 -   4.3s
[CV] classify__C=10, reduce_dim__k=4000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=1000, score=0.961972 -   6.2s
[CV] ..... classify__C=1, reduce_dim__k=10000, score=0.976317 -   8.1s
[CV] classify__C=10, reduce_dim__k=4000 ..............................
[CV] classify__C=10, reduce_dim__k=4000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=1000, score=0.960658 -   5.8s
[CV] classify__C=10, reduce_dim__k=4000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=1000, score=0.960947 -   5.7s
[CV] classify__C=10, reduce_dim__k=4000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=1000, score=0.961370 -   7.3s
[CV] classify__C=10, reduce_dim__k=5000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=2000, score=0.963508 -   4.4s
[CV] classify__C=10, reduce_dim__k=5000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=2000, score=0.967293 -   4.7s
[CV] classify__C=10, reduce_dim__k=5000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=2000, score=0.967712 -   4.4s
[CV] classify__C=10, reduce_dim__k=5000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=1000, score=0.956930 -   7.5s
[CV] classify__C=10, reduce_dim__k=5000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=3000, score=0.968095 -   3.9s
[CV] classify__C=10, reduce_dim__k=6000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=2000, score=0.967064 -   4.5s
[CV] classify__C=10, reduce_dim__k=6000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=3000, score=0.970579 -   4.0s
[CV] classify__C=10, reduce_dim__k=6000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=3000, score=0.969146 -   4.2s
[CV] classify__C=10, reduce_dim__k=6000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=3000, score=0.969436 -   4.5s
[CV] classify__C=10, reduce_dim__k=6000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=3000, score=0.970044 -   4.4s
[CV] ..... classify__C=10, reduce_dim__k=4000, score=0.969033 -   4.3s
[CV] classify__C=10, reduce_dim__k=10000 .............................
[CV] classify__C=10, reduce_dim__k=10000 .............................
[CV] ..... classify__C=10, reduce_dim__k=4000, score=0.973396 -   4.5s
[CV] classify__C=10, reduce_dim__k=10000 .............................
[CV] ..... classify__C=10, reduce_dim__k=4000, score=0.970828 -   4.2s
[CV] classify__C=10, reduce_dim__k=10000 .............................
[CV] ..... classify__C=10, reduce_dim__k=4000, score=0.971026 -   4.9s
[CV] ..... classify__C=10, reduce_dim__k=4000, score=0.971317 -   4.6s
[CV] classify__C=10, reduce_dim__k=10000 .............................
[CV] ..... classify__C=10, reduce_dim__k=5000, score=0.972926 -   4.6s
[CV] ..... classify__C=10, reduce_dim__k=5000, score=0.972474 -   5.2s
[CV] ..... classify__C=10, reduce_dim__k=5000, score=0.973062 -   4.8s
[CV] ..... classify__C=10, reduce_dim__k=5000, score=0.974295 -   4.9s
[CV] ..... classify__C=10, reduce_dim__k=5000, score=0.972867 -   4.8s
[CV] ..... classify__C=10, reduce_dim__k=6000, score=0.971849 -   5.0s
[CV] ..... classify__C=10, reduce_dim__k=6000, score=0.972926 -   4.9s
[CV] ..... classify__C=10, reduce_dim__k=6000, score=0.973845 -   5.3s
[CV] ..... classify__C=10, reduce_dim__k=6000, score=0.974922 -   5.0s
[CV] ..... classify__C=10, reduce_dim__k=6000, score=0.974435 -   4.7s
[CV] .... classify__C=10, reduce_dim__k=10000, score=0.974022 -   5.5s
[CV] .... classify__C=10, reduce_dim__k=10000, score=0.972787 -   5.6s
[CV] .... classify__C=10, reduce_dim__k=10000, score=0.976489 -   5.3s
[CV] .... classify__C=10, reduce_dim__k=10000, score=0.974122 -   5.1s
[CV] .... classify__C=10, reduce_dim__k=10000, score=0.974941 -   5.9s
[Parallel(n_jobs=16)]: Done 120 out of 120 | elapsed:   37.7s finished

Best parameters found on training set for verb obj classification: 

{'classify__C': 0.1, 'reduce_dim__k': 'all'}
{'REL-PREF=16-SG', 'REL-PREF=NEG', 'REL-PREF=9-SG', 'REL-PREF=7-SG', '-', 'REL-PREF=5-SG', 'REL-PREF=8-PL', 'REL-PREF=11-SG', 'REL-PREF=2-PL-SUB', 'REL-PREF=18-SG', 'REL-PREF=6-PLSG', 'REL-PREF=1-SG-SUB', 'REL-PREF=15-SG', 'REL-PREF=10-PL', 'REL-PREF=GEN', 'REL-PREF=6-PL', 'REL-PREF=17-SG', 'REL-PREF=3-SG', 'REL-PREF=4-PL'}
/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/cross_validation.py:553: Warning: The least populated class in y has only 1 members, which is too few. The minimum number of labels for any class cannot be less than n_folds=5.
  % (min_labels, self.n_folds)), Warning)
Fitting 5 folds for each of 24 candidates, totalling 120 fits
[CV] classify__C=0.1, reduce_dim__k=all ..............................
[CV] classify__C=0.1, reduce_dim__k=all ..............................
[CV] classify__C=0.1, reduce_dim__k=all ..............................
[CV] classify__C=0.1, reduce_dim__k=all ..............................
[CV] classify__C=0.1, reduce_dim__k=all ..............................
[CV] classify__C=0.1, reduce_dim__k=1000 .............................
[CV] classify__C=0.1, reduce_dim__k=1000 .............................
[CV] classify__C=0.1, reduce_dim__k=1000 .............................
[CV] classify__C=0.1, reduce_dim__k=1000 .............................
[CV] classify__C=0.1, reduce_dim__k=1000 .............................
[CV] classify__C=0.1, reduce_dim__k=2000 .............................
[CV] classify__C=0.1, reduce_dim__k=2000 .............................
[CV] classify__C=0.1, reduce_dim__k=2000 .............................
[CV] classify__C=0.1, reduce_dim__k=2000 .............................
[CV] classify__C=0.1, reduce_dim__k=2000 .............................
[CV] classify__C=0.1, reduce_dim__k=3000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=1000, score=0.986061 -   2.1s
[CV] classify__C=0.1, reduce_dim__k=3000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=1000, score=0.986235 -   2.3s
[CV] classify__C=0.1, reduce_dim__k=3000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=1000, score=0.986052 -   2.2s
[CV] classify__C=0.1, reduce_dim__k=3000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=1000, score=0.984974 -   2.4s
[CV] .... classify__C=0.1, reduce_dim__k=1000, score=0.987298 -   2.3s
[CV] classify__C=0.1, reduce_dim__k=3000 .............................
[CV] classify__C=0.1, reduce_dim__k=4000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=2000, score=0.986836 -   2.4s
[CV] ..... classify__C=0.1, reduce_dim__k=all, score=0.989207 -   2.9s
[CV] .... classify__C=0.1, reduce_dim__k=2000, score=0.987635 -   2.5s
[CV] .... classify__C=0.1, reduce_dim__k=2000, score=0.987956 -   2.6s
[Parallel(n_jobs=16)]: Done   9 tasks      | elapsed:    3.0s
[CV] classify__C=0.1, reduce_dim__k=4000 .............................
[CV] classify__C=0.1, reduce_dim__k=4000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=2000, score=0.986688 -   2.6s
[CV] ..... classify__C=0.1, reduce_dim__k=all, score=0.988105 -   3.0s
[CV] classify__C=0.1, reduce_dim__k=4000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=2000, score=0.988396 -   2.5s
[CV] classify__C=0.1, reduce_dim__k=4000 .............................
[CV] classify__C=0.1, reduce_dim__k=5000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=3000, score=0.987956 -   2.5s
[CV] classify__C=0.1, reduce_dim__k=5000 .............................
[CV] classify__C=0.1, reduce_dim__k=5000 .............................
[CV] classify__C=0.1, reduce_dim__k=5000 .............................
[CV] ..... classify__C=0.1, reduce_dim__k=all, score=0.987314 -   3.2s
[CV] ..... classify__C=0.1, reduce_dim__k=all, score=0.989030 -   3.2s
[CV] classify__C=0.1, reduce_dim__k=5000 .............................
[CV] classify__C=0.1, reduce_dim__k=6000 .............................
[CV] ..... classify__C=0.1, reduce_dim__k=all, score=0.989180 -   3.2s
[CV] classify__C=0.1, reduce_dim__k=6000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=3000, score=0.987165 -   2.2s
[CV] classify__C=0.1, reduce_dim__k=6000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=3000, score=0.988403 -   2.3s
[CV] classify__C=0.1, reduce_dim__k=6000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=3000, score=0.987157 -   2.7s
[CV] classify__C=0.1, reduce_dim__k=6000 .............................
[CV] .... classify__C=0.1, reduce_dim__k=4000, score=0.988581 -   2.8s
[CV] .... classify__C=0.1, reduce_dim__k=3000, score=0.988866 -   2.8s
[CV] classify__C=0.1, reduce_dim__k=10000 ............................
[CV] classify__C=0.1, reduce_dim__k=10000 ............................
[CV] .... classify__C=0.1, reduce_dim__k=4000, score=0.987478 -   2.7s
[CV] classify__C=0.1, reduce_dim__k=10000 ............................
[CV] .... classify__C=0.1, reduce_dim__k=4000, score=0.988873 -   2.8s
[CV] .... classify__C=0.1, reduce_dim__k=4000, score=0.987314 -   2.8s
[CV] classify__C=0.1, reduce_dim__k=10000 ............................
[CV] classify__C=0.1, reduce_dim__k=10000 ............................
[CV] .... classify__C=0.1, reduce_dim__k=4000, score=0.989180 -   3.0s
[CV] .... classify__C=0.1, reduce_dim__k=5000, score=0.987165 -   2.9s
[CV] classify__C=1, reduce_dim__k=all ................................
[CV] classify__C=1, reduce_dim__k=all ................................
[CV] .... classify__C=0.1, reduce_dim__k=5000, score=0.988894 -   3.1s
[CV] classify__C=1, reduce_dim__k=all ................................
[CV] .... classify__C=0.1, reduce_dim__k=5000, score=0.989187 -   3.0s
[CV] classify__C=1, reduce_dim__k=all ................................
[CV] .... classify__C=0.1, reduce_dim__k=5000, score=0.987627 -   3.2s
[CV] classify__C=1, reduce_dim__k=all ................................
[CV] .... classify__C=0.1, reduce_dim__k=6000, score=0.987635 -   3.1s
[CV] .... classify__C=0.1, reduce_dim__k=5000, score=0.989180 -   3.3s
[CV] .... classify__C=0.1, reduce_dim__k=6000, score=0.989207 -   3.2s
[CV] classify__C=1, reduce_dim__k=1000 ...............................
[CV] classify__C=1, reduce_dim__k=1000 ...............................
[CV] classify__C=1, reduce_dim__k=1000 ...............................
[CV] .... classify__C=0.1, reduce_dim__k=6000, score=0.987627 -   2.9s
[CV] classify__C=1, reduce_dim__k=1000 ...............................
[CV] .... classify__C=0.1, reduce_dim__k=6000, score=0.989187 -   2.9s
[CV] classify__C=1, reduce_dim__k=1000 ...............................
[CV] .... classify__C=0.1, reduce_dim__k=6000, score=0.989337 -   3.1s
[CV] classify__C=1, reduce_dim__k=2000 ...............................
[CV] ... classify__C=0.1, reduce_dim__k=10000, score=0.989363 -   3.1s
[CV] ... classify__C=0.1, reduce_dim__k=10000, score=0.987792 -   3.1s
[CV] classify__C=1, reduce_dim__k=2000 ...............................
[CV] classify__C=1, reduce_dim__k=2000 ...............................
[CV] ... classify__C=0.1, reduce_dim__k=10000, score=0.987627 -   3.0s
[CV] classify__C=1, reduce_dim__k=2000 ...............................
[CV] ... classify__C=0.1, reduce_dim__k=10000, score=0.989187 -   3.1s
[CV] ... classify__C=0.1, reduce_dim__k=10000, score=0.989337 -   3.1s
[CV] classify__C=1, reduce_dim__k=2000 ...............................
[CV] classify__C=1, reduce_dim__k=3000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=1000, score=0.986548 -   3.2s
[CV] classify__C=1, reduce_dim__k=3000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=1000, score=0.985121 -   3.2s
[CV] classify__C=1, reduce_dim__k=3000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=1000, score=0.984661 -   3.4s
[CV] classify__C=1, reduce_dim__k=3000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=1000, score=0.986052 -   3.0s
[CV] ....... classify__C=1, reduce_dim__k=all, score=0.987948 -   4.4s
[CV] classify__C=1, reduce_dim__k=3000 ...............................
[CV] classify__C=1, reduce_dim__k=4000 ...............................
[CV] ....... classify__C=1, reduce_dim__k=all, score=0.990145 -   4.7s
[CV] classify__C=1, reduce_dim__k=4000 ...............................
[CV] ....... classify__C=1, reduce_dim__k=all, score=0.989187 -   4.7s
[CV] classify__C=1, reduce_dim__k=4000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=1000, score=0.987612 -   3.2s
[CV] ....... classify__C=1, reduce_dim__k=all, score=0.987471 -   4.9s
[CV] classify__C=1, reduce_dim__k=4000 ...............................
[CV] classify__C=1, reduce_dim__k=4000 ...............................
[CV] ....... classify__C=1, reduce_dim__k=all, score=0.988709 -   4.7s
[CV] classify__C=1, reduce_dim__k=5000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=2000, score=0.988268 -   3.5s
[CV] classify__C=1, reduce_dim__k=5000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=2000, score=0.986688 -   3.6s
[CV] classify__C=1, reduce_dim__k=5000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=2000, score=0.987009 -   3.7s
[CV] classify__C=1, reduce_dim__k=5000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=2000, score=0.988239 -   3.6s
[CV] ...... classify__C=1, reduce_dim__k=3000, score=0.987956 -   3.6s
[CV] classify__C=1, reduce_dim__k=5000 ...............................
[CV] classify__C=1, reduce_dim__k=6000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=2000, score=0.988090 -   4.0s
[CV] classify__C=1, reduce_dim__k=6000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=3000, score=0.987322 -   3.8s
[CV] ...... classify__C=1, reduce_dim__k=3000, score=0.988560 -   3.6s
[CV] classify__C=1, reduce_dim__k=6000 ...............................
[CV] classify__C=1, reduce_dim__k=6000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=3000, score=0.986374 -   3.9s
[CV] classify__C=1, reduce_dim__k=6000 ...............................
[CV] ...... classify__C=1, reduce_dim__k=3000, score=0.987925 -   3.8s
[CV] classify__C=1, reduce_dim__k=10000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=4000, score=0.989363 -   4.1s
[CV] classify__C=1, reduce_dim__k=10000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=4000, score=0.988560 -   4.4s
[CV] classify__C=1, reduce_dim__k=10000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=4000, score=0.988105 -   4.7s
[CV] classify__C=1, reduce_dim__k=10000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=4000, score=0.986688 -   4.6s
[CV] classify__C=1, reduce_dim__k=10000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=5000, score=0.989833 -   4.5s
[CV] classify__C=10, reduce_dim__k=all ...............................
[CV] ...... classify__C=1, reduce_dim__k=4000, score=0.988553 -   4.8s
[CV] classify__C=10, reduce_dim__k=all ...............................
[CV] ...... classify__C=1, reduce_dim__k=5000, score=0.986696 -   5.2s
[CV] classify__C=10, reduce_dim__k=all ...............................
[CV] ...... classify__C=1, reduce_dim__k=5000, score=0.987314 -   5.1s
[CV] classify__C=10, reduce_dim__k=all ...............................
[CV] ...... classify__C=1, reduce_dim__k=5000, score=0.989030 -   5.1s
[CV] ...... classify__C=1, reduce_dim__k=5000, score=0.988866 -   4.9s
[CV] classify__C=10, reduce_dim__k=all ...............................
[CV] classify__C=10, reduce_dim__k=1000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=6000, score=0.989833 -   5.1s
[CV] classify__C=10, reduce_dim__k=1000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=6000, score=0.986383 -   5.6s
[CV] classify__C=10, reduce_dim__k=1000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=6000, score=0.989030 -   4.9s
[CV] classify__C=10, reduce_dim__k=1000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=6000, score=0.987314 -   5.3s
[CV] classify__C=10, reduce_dim__k=1000 ..............................
[CV] ..... classify__C=1, reduce_dim__k=10000, score=0.989989 -   5.2s
[CV] classify__C=10, reduce_dim__k=2000 ..............................
[CV] ...... classify__C=10, reduce_dim__k=all, score=0.989363 -   4.4s
[CV] classify__C=10, reduce_dim__k=2000 ..............................
[CV] ...... classify__C=1, reduce_dim__k=6000, score=0.988866 -   6.3s
[CV] ..... classify__C=1, reduce_dim__k=10000, score=0.987009 -   5.5s
[CV] classify__C=10, reduce_dim__k=2000 ..............................
[CV] classify__C=10, reduce_dim__k=2000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=1000, score=0.984671 -   2.9s
[CV] classify__C=10, reduce_dim__k=2000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=1000, score=0.984192 -   2.9s
[CV] classify__C=10, reduce_dim__k=3000 ..............................
[CV] ...... classify__C=10, reduce_dim__k=all, score=0.987009 -   5.0s
[CV] classify__C=10, reduce_dim__k=3000 ..............................
[CV] ..... classify__C=1, reduce_dim__k=10000, score=0.989187 -   5.7s
[Parallel(n_jobs=16)]: Done  82 tasks      | elapsed:   21.4s
[CV] classify__C=10, reduce_dim__k=3000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=1000, score=0.984799 -   2.7s
[CV] classify__C=10, reduce_dim__k=3000 ..............................
[CV] ..... classify__C=1, reduce_dim__k=10000, score=0.987784 -   6.0s
[CV] classify__C=10, reduce_dim__k=3000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=1000, score=0.983399 -   3.3s
[CV] classify__C=10, reduce_dim__k=4000 ..............................
[CV] ...... classify__C=10, reduce_dim__k=all, score=0.986844 -   4.8s
[CV] classify__C=10, reduce_dim__k=4000 ..............................
[CV] ..... classify__C=1, reduce_dim__k=10000, score=0.988553 -   6.2s
[CV] ..... classify__C=10, reduce_dim__k=1000, score=0.985730 -   2.9s
[CV] classify__C=10, reduce_dim__k=4000 ..............................
[CV] classify__C=10, reduce_dim__k=4000 ..............................
[CV] ...... classify__C=10, reduce_dim__k=all, score=0.989030 -   4.8s
[CV] classify__C=10, reduce_dim__k=4000 ..............................
[CV] ...... classify__C=10, reduce_dim__k=all, score=0.987925 -   4.9s
[CV] classify__C=10, reduce_dim__k=5000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=2000, score=0.986391 -   3.1s
[CV] classify__C=10, reduce_dim__k=5000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=2000, score=0.986383 -   3.4s
[CV] classify__C=10, reduce_dim__k=5000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=2000, score=0.985896 -   3.4s
[CV] classify__C=10, reduce_dim__k=5000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=3000, score=0.987486 -   3.4s
[CV] classify__C=10, reduce_dim__k=5000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=2000, score=0.983399 -   3.9s
[CV] classify__C=10, reduce_dim__k=6000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=2000, score=0.986044 -   3.8s
[CV] classify__C=10, reduce_dim__k=6000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=3000, score=0.986070 -   3.9s
[CV] classify__C=10, reduce_dim__k=6000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=3000, score=0.987619 -   3.9s
[CV] classify__C=10, reduce_dim__k=6000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=3000, score=0.985748 -   4.1s
[CV] classify__C=10, reduce_dim__k=6000 ..............................
[CV] ..... classify__C=10, reduce_dim__k=3000, score=0.987455 -   4.3s
[CV] classify__C=10, reduce_dim__k=10000 .............................
[CV] ..... classify__C=10, reduce_dim__k=4000, score=0.988425 -   4.2s
[CV] classify__C=10, reduce_dim__k=10000 .............................
[CV] ..... classify__C=10, reduce_dim__k=4000, score=0.987933 -   4.5s
[CV] classify__C=10, reduce_dim__k=10000 .............................
[CV] ..... classify__C=10, reduce_dim__k=4000, score=0.986539 -   4.8s
[CV] ..... classify__C=10, reduce_dim__k=4000, score=0.986531 -   4.8s
[CV] classify__C=10, reduce_dim__k=10000 .............................
[CV] classify__C=10, reduce_dim__k=10000 .............................
[CV] ..... classify__C=10, reduce_dim__k=4000, score=0.987769 -   5.0s
[CV] ..... classify__C=10, reduce_dim__k=5000, score=0.989207 -   5.0s
[CV] ..... classify__C=10, reduce_dim__k=5000, score=0.986226 -   5.2s
[CV] ..... classify__C=10, reduce_dim__k=5000, score=0.988560 -   4.9s
[CV] ..... classify__C=10, reduce_dim__k=5000, score=0.985904 -   5.3s
[CV] ..... classify__C=10, reduce_dim__k=6000, score=0.988894 -   5.3s
[CV] ..... classify__C=10, reduce_dim__k=5000, score=0.988082 -   5.5s
[CV] ..... classify__C=10, reduce_dim__k=6000, score=0.986383 -   5.7s
[CV] ..... classify__C=10, reduce_dim__k=6000, score=0.988090 -   5.5s
[CV] ..... classify__C=10, reduce_dim__k=6000, score=0.986374 -   6.4s
[CV] ..... classify__C=10, reduce_dim__k=6000, score=0.987455 -   6.2s
[CV] .... classify__C=10, reduce_dim__k=10000, score=0.988738 -   6.0s
[CV] .... classify__C=10, reduce_dim__k=10000, score=0.987165 -   6.0s
[CV] .... classify__C=10, reduce_dim__k=10000, score=0.988717 -   5.6s
[CV] .... classify__C=10, reduce_dim__k=10000, score=0.986218 -   6.3s
[CV] .... classify__C=10, reduce_dim__k=10000, score=0.988082 -   6.3s
[Parallel(n_jobs=16)]: Done 120 out of 120 | elapsed:   33.1s finished

Best parameters found on training set for verb rel classification: 

{'classify__C': 1, 'reduce_dim__k': 'all'}
Classification results for part-of-speech on test
/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/metrics/classification.py:1135: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples.
  'precision', 'predicted', average, warn_for)
/opt/intel/intelpython3/lib/python3.6/site-packages/sklearn/metrics/classification.py:1137: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples.
  'recall', 'true', average, warn_for)
                      precision    recall  f1-score   support

            A-UNINFL       1.00      1.00      1.00        66
                ABBR       0.95      0.98      0.96       130
                 ADJ       0.92      0.92      0.92     17997
                 ADV       0.92      0.93      0.93     22807
             AG-PART       0.00      0.00      0.00      2233
           AMPERSAND       1.00      1.00      1.00         3
                  CC       0.79      0.98      0.88     13404
               COLON       1.00      1.00      1.00      1742
               COMMA       1.00      1.00      1.00     24795
                CONJ       0.92      0.95      0.93      8103
             CONJ/CC       1.00      1.00      1.00      1490
                 DEM       0.92      0.97      0.94       130
         DOLLAR-SIGN       1.00      1.00      1.00         2
        DOUBLE-QUOTE       0.00      0.00      0.00       225
DOUBLE-QUOTE-CLOSING       0.00      0.00      0.00       505
DOUBLE-QUOTE-OPENING       0.83      1.00      0.91      3674
          EQUAL-MARK       0.00      0.00      0.00         0
              EXCLAM       0.98      0.93      0.95       792
             GEN-CON       1.00      1.00      1.00     25206
         GEN-CON-KWA       0.00      0.00      0.00       516
              HYPHEN       1.00      1.00      1.00       537
            INTERROG       0.99      1.00      0.99       826
    LEFT-PARENTHESIS       1.00      1.00      1.00      1914
                 MWE       0.00      0.00      0.00        32
                   N       0.94      0.93      0.93    119310
                 NUM       0.98      0.99      0.98      5631
             NUM-ROM       1.00      0.60      0.75        10
        PERCENT-MARK       1.00      1.00      1.00         4
           PLUS-SIGN       0.00      0.00      0.00         2
           POSS-PRON       0.99      1.00      1.00       863
                PREP       0.95      0.93      0.94     18989
            PREP/ADV       0.67      1.00      0.80         2
                PRON       0.98      0.99      0.99     24921
            PROPNAME       0.94      0.94      0.94     23963
       QUESTION-MARK       1.00      1.00      1.00       779
              REL-LI       0.94      0.92      0.93       596
          REL-LI-VYO       0.96      0.99      0.97       132
              REL-SI       0.91      0.93      0.92       108
          REL-SI-VYO       0.00      0.00      0.00         2
   RIGHT-PARENTHESIS       1.00      1.00      1.00      2047
          SEMI-COLON       1.00      1.00      1.00      1488
        SINGLE-QUOTE       0.86      1.00      0.92      1364
SINGLE-QUOTE-CLOSING       0.00      0.00      0.00        49
SINGLE-QUOTE-OPENING       0.00      0.00      0.00       173
               SLASH       1.00      1.00      1.00       118
                STOP       0.00      0.00      0.00        12
               TITLE       0.99      1.00      0.99       153
                   V       0.90      0.92      0.91     65096
                V-BE       0.89      0.82      0.85      1702
               V-DEF       0.99      0.87      0.93       118
                   _       1.00      0.99      0.99     18322

         avg / total       0.93      0.94      0.93    413083

Classification results for noun class on test
             precision    recall  f1-score   support

     1/2-PL       0.80      0.82      0.81       316
     1/2-SG       0.90      0.99      0.95      7711
    1/2-SG        0.99      1.00      1.00       120
      11-SG       0.82      0.62      0.71       351
     5/6-PL       0.80      0.24      0.36       165
     7/8-PL       0.79      0.47      0.59        58
     7/8-SG       0.73      0.45      0.56       120
    9/10-SG       0.81      0.81      0.81      3893
          -       0.85      0.06      0.10      7470
     1/2-PL       0.94      1.00      0.97      5847
    1/2-PL        0.75      0.82      0.78        11
     1/2-SG       0.92      0.93      0.92      6358
    1/2-SG        0.93      0.68      0.79        19
      11-SG       0.93      0.99      0.96      6989
     11-SG        0.90      0.81      0.85        32
   11/10-PL       0.89      0.95      0.92       648
   11/10-SG       0.91      0.96      0.93      2586
  11/10-SG        1.00      1.00      1.00        10
    11/6-PL       0.83      0.96      0.89       135
    11/6-SG       0.99      0.99      0.99       502
      15-SG       0.49      0.99      0.66      1983
     15-SG        0.38      0.92      0.54       448
      16-SG       0.97      1.00      0.99       175
      17-SG       0.91      0.94      0.93        34
    3/10-PL       1.00      1.00      1.00        12
     3/4-PL       0.97      1.00      0.98      2440
     3/4-SG       0.93      0.98      0.96      5786
    3/4-SG        1.00      1.00      1.00         1
     5/6-PL       0.96      0.99      0.97      7362
    5/6-PL        1.00      0.25      0.40         4
     5/6-SG       0.84      0.88      0.86      6590
    5/6-SG        1.00      0.75      0.86        12
       6-PL       0.83      0.80      0.82       138
     6-PLSG       0.94      0.97      0.95      3012
    6-PLSG        1.00      0.93      0.96        27
     7/8-PL       0.96      0.98      0.97      2526
    7/8-PL        1.00      0.50      0.67         6
     7/8-SG       0.91      1.00      0.95      4213
    7/8-SG        0.88      0.79      0.84        48
       9-SG       0.00      0.00      0.00         0
    9/10-PL       0.55      0.21      0.30      7546
   9/10-PL        0.33      0.69      0.45        26
    9/10-SG       0.75      0.93      0.83     27989
   9/10-SG        0.84      0.69      0.76       200
     9/6-PL       0.92      0.85      0.89       576
    9/6-PL        0.83      0.83      0.83         6
     9/6-SG       0.92      0.78      0.84      3077
    9/6-SG        0.97      0.91      0.94        74

avg / total       0.84      0.84      0.81    117652

Classification results for tam on test
               precision    recall  f1-score   support

            -       0.99      0.94      0.97     27510
     TAM=COND       0.70      0.73      0.71      1510
 TAM=COND-NEG       0.94      1.00      0.97        77
      TAM=FUT       0.94      0.92      0.93      2506
     TAM=NARR       0.19      0.70      0.30        33
      TAM=NEG       0.90      0.97      0.93      1385
     TAM=PAST       0.94      0.97      0.95     15111
 TAM=PAST-NEG       0.93      0.94      0.93       916
     TAM=PERF       0.98      1.00      0.99      3551
       TAM=PR       0.91      0.94      0.92      9656
     TAM=SBJN       0.91      0.98      0.94      4231
TAM=SBJN-CONS       0.00      0.00      0.00         1

  avg / total       0.95      0.95      0.95     66487

Classification results for subj on test
                         precision    recall  f1-score   support

                      -       0.99      0.90      0.95     23150
          SUB-PREF=1-SG       0.99      0.97      0.98       134
         SUB-PREF=1-SG1       0.97      1.00      0.98      4434
         SUB-PREF=1-SG2       0.63      0.51      0.56       624
         SUB-PREF=1-SG3       0.96      0.99      0.98     11762
         SUB-PREF=10-PL       0.94      1.00      0.97      1744
         SUB-PREF=11-SG       0.51      0.56      0.53      1555
         SUB-PREF=15-SG       0.47      0.30      0.37       266
         SUB-PREF=16-SG       0.90      0.96      0.93       245
         SUB-PREF=17-SG       0.85      0.88      0.86       754
         SUB-PREF=18-SG       0.74      0.78      0.76        40
          SUB-PREF=2-PL       0.89      0.92      0.91        93
         SUB-PREF=2-PL1       0.96      1.00      0.98      2465
         SUB-PREF=2-PL2       0.80      0.96      0.87       322
         SUB-PREF=2-PL3       0.92      0.99      0.95      5592
          SUB-PREF=3-SG       0.48      0.50      0.49      1481
          SUB-PREF=4-PL       0.23      0.05      0.08       353
          SUB-PREF=5-SG       0.94      1.00      0.97      1344
          SUB-PREF=6-PL       0.79      0.93      0.86      1802
        SUB-PREF=6-PLSG       0.24      0.08      0.12       370
          SUB-PREF=7-SG       0.86      0.99      0.92       914
          SUB-PREF=8-PL       0.88      1.00      0.93       584
          SUB-PREF=9-SG       0.90      0.98      0.94      4933
SUB-PREF=ARCHAIC-PR-yua       0.00      0.00      0.00         2
      SUB-PREF=HABIT-PL       0.40      0.29      0.34       535
      SUB-PREF=HABIT-SG       0.54      0.74      0.63       775
           SUB-PREF=PL1       0.97      0.92      0.95        78
           SUB-PREF=SG1       0.99      1.00      0.99        98
           SUB-PREF=SG2       0.54      0.37      0.44        38

            avg / total       0.91      0.91      0.91     66487

Classification results for obj on test
                  precision    recall  f1-score   support

               -       0.99      0.98      0.98     60504
  OBJ-PREF=1-SG1       0.81      0.89      0.85       272
  OBJ-PREF=1-SG2       0.71      0.76      0.73       193
  OBJ-PREF=1-SG3       0.83      0.96      0.89      1900
  OBJ-PREF=10-PL       0.76      0.88      0.82       251
  OBJ-PREF=11-SG       0.14      0.14      0.14        50
  OBJ-PREF=15-SG       0.00      0.00      0.00        16
  OBJ-PREF=16-SG       0.67      0.08      0.14        26
  OBJ-PREF=2-PL1       0.78      0.74      0.76       194
  OBJ-PREF=2-PL2       0.54      0.27      0.36       131
  OBJ-PREF=2-PL3       0.73      0.90      0.81       701
   OBJ-PREF=3-SG       0.67      0.64      0.65       265
   OBJ-PREF=4-PL       0.17      0.07      0.09       107
   OBJ-PREF=5-SG       0.77      0.72      0.74       361
   OBJ-PREF=6-PL       0.82      0.93      0.87       369
   OBJ-PREF=7-SG       0.76      0.49      0.59       129
   OBJ-PREF=8-PL       0.67      0.85      0.75        62
   OBJ-PREF=9-SG       0.66      0.82      0.73       457
OBJ-PREF=PL-REFL       0.83      0.64      0.72        94
OBJ-PREF=SG-REFL       0.68      0.89      0.77       405

     avg / total       0.97      0.96      0.96     66487

Classification results for rel on test
                   precision    recall  f1-score   support

                -       1.00      0.99      1.00     61066
REL-PREF=1-SG-SUB       0.92      0.96      0.94       446
   REL-PREF=10-PL       0.97      1.00      0.98       331
   REL-PREF=11-SG       0.56      0.55      0.55       211
   REL-PREF=15-SG       0.50      0.40      0.45        47
   REL-PREF=16-SG       0.96      1.00      0.98       986
   REL-PREF=17-SG       0.12      0.24      0.16        17
   REL-PREF=18-SG       1.00      0.75      0.86         4
REL-PREF=2-PL-SUB       0.86      0.91      0.88       568
    REL-PREF=3-SG       0.29      0.25      0.27       150
    REL-PREF=4-PL       0.26      0.18      0.21       161
    REL-PREF=5-SG       0.94      1.00      0.97       210
    REL-PREF=6-PL       0.77      0.76      0.76       412
  REL-PREF=6-PLSG       0.00      0.00      0.00         8
    REL-PREF=7-SG       0.93      0.98      0.95       220
    REL-PREF=8-PL       0.98      1.00      0.99       548
    REL-PREF=9-SG       0.68      0.81      0.74       513
     REL-PREF=GEN       0.90      0.95      0.92       582
     REL-PREF=NEG       0.50      0.14      0.22         7

      avg / total       0.98      0.98      0.98     66487

kenneth@ml:~/SwahiliMorphemeTagging$ [Kkenneth@ml:~/SwahiliMorphemeTagging$ python3 swahiliFullTrain.py outputTrain outputTest -n 16kenneth@ml:~/SwahiliMorphemeTagging$ exit[K[2Plsexitpython3 swahiliFullTrain.py outputTrain outputTest -n 16kenneth@ml:~/SwahiliMorphemeTagging$ [Kqw  